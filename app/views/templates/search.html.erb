<script type="text/javascript" charset="utf-8">
    "use strict";

    function _typeof(obj) { return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj; }

    (function (factory) {
        if (typeof define === "function" && define.amd) {
            try {
                define(["jquery"], factory);
            } catch (err) {
                define([], factory);
            }
        } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && module.exports) {
            var jQuery;
            try {
                jQuery = require("jquery");
            } catch (err) {
                jQuery = null;
            }
            module.exports = factory(jQuery);
        } else if (window) {
            window.Slider = factory(window.jQuery);
        }
    })(function ($) {
        // Reference to Slider constructor
        var Slider;

        (function ($) {

            'use strict';

            // -------------------------- utils -------------------------- //

            var slice = Array.prototype.slice;

            function noop() {}

            // -------------------------- definition -------------------------- //

            function defineBridget($) {

                // bail if no jQuery
                if (!$) {
                    return;
                }

                // -------------------------- addOptionMethod -------------------------- //

                /**
                 * adds option method -> $().plugin('option', {...})
                 * @param {Function} PluginClass - constructor class
                 */
                function addOptionMethod(PluginClass) {
                    // don't overwrite original option method
                    if (PluginClass.prototype.option) {
                        return;
                    }

                    // option setter
                    PluginClass.prototype.option = function (opts) {
                        // bail out if not an object
                        if (!$.isPlainObject(opts)) {
                            return;
                        }
                        this.options = $.extend(true, this.options, opts);
                    };
                }

                // -------------------------- plugin bridge -------------------------- //

                // helper function for logging errors
                // $.error breaks jQuery chaining
                var logError = typeof console === 'undefined' ? noop : function (message) {
                    console.error(message);
                };

                /**
                 * jQuery plugin bridge, access methods like $elem.plugin('method')
                 * @param {String} namespace - plugin name
                 * @param {Function} PluginClass - constructor class
                 */
                function bridge(namespace, PluginClass) {
                    // add to jQuery fn namespace
                    $.fn[namespace] = function (options) {
                        if (typeof options === 'string') {
                            // call plugin method when first argument is a string
                            // get arguments for method
                            var args = slice.call(arguments, 1);

                            for (var i = 0, len = this.length; i < len; i++) {
                                var elem = this[i];
                                var instance = $.data(elem, namespace);
                                if (!instance) {
                                    logError("cannot call methods on " + namespace + " prior to initialization; " + "attempted to call '" + options + "'");
                                    continue;
                                }
                                if (!$.isFunction(instance[options]) || options.charAt(0) === '_') {
                                    logError("no such method '" + options + "' for " + namespace + " instance");
                                    continue;
                                }

                                // trigger method with arguments
                                var returnValue = instance[options].apply(instance, args);

                                // break look and return first value if provided
                                if (returnValue !== undefined && returnValue !== instance) {
                                    return returnValue;
                                }
                            }
                            // return this if no return value
                            return this;
                        } else {
                            var objects = this.map(function () {
                                var instance = $.data(this, namespace);
                                if (instance) {
                                    // apply options & init
                                    instance.option(options);
                                    instance._init();
                                } else {
                                    // initialize new instance
                                    instance = new PluginClass(this, options);
                                    $.data(this, namespace, instance);
                                }
                                return $(this);
                            });

                            if (!objects || objects.length > 1) {
                                return objects;
                            } else {
                                return objects[0];
                            }
                        }
                    };
                }

                // -------------------------- bridget -------------------------- //

                /**
                 * converts a Prototypical class into a proper jQuery plugin
                 *   the class must have a ._init method
                 * @param {String} namespace - plugin name, used in $().pluginName
                 * @param {Function} PluginClass - constructor class
                 */
                $.bridget = function (namespace, PluginClass) {
                    addOptionMethod(PluginClass);
                    bridge(namespace, PluginClass);
                };

                return $.bridget;
            }

            // get jquery from browser global
            defineBridget($);
        })($);

        /*************************************************
         BOOTSTRAP-SLIDER SOURCE CODE
         **************************************************/

        (function ($) {

            var ErrorMsgs = {
                formatInvalidInputErrorMsg: function formatInvalidInputErrorMsg(input) {
                    return "Invalid input value '" + input + "' passed in";
                },
                callingContextNotSliderInstance: "Calling context element does not have instance of Slider bound to it. Check your code to make sure the JQuery object returned from the call to the slider() initializer is calling the method"
            };

            var SliderScale = {
                linear: {
                    toValue: function toValue(percentage) {
                        var rawValue = percentage / 100 * (this.options.max - this.options.min);
                        var shouldAdjustWithBase = true;
                        if (this.options.ticks_positions.length > 0) {
                            var minv,
                                    maxv,
                                    minp,
                                    maxp = 0;
                            for (var i = 1; i < this.options.ticks_positions.length; i++) {
                                if (percentage <= this.options.ticks_positions[i]) {
                                    minv = this.options.ticks[i - 1];
                                    minp = this.options.ticks_positions[i - 1];
                                    maxv = this.options.ticks[i];
                                    maxp = this.options.ticks_positions[i];

                                    break;
                                }
                            }
                            var partialPercentage = (percentage - minp) / (maxp - minp);
                            rawValue = minv + partialPercentage * (maxv - minv);
                            shouldAdjustWithBase = false;
                        }

                        var adjustment = shouldAdjustWithBase ? this.options.min : 0;
                        var value = adjustment + Math.round(rawValue / this.options.step) * this.options.step;
                        if (value < this.options.min) {
                            return this.options.min;
                        } else if (value > this.options.max) {
                            return this.options.max;
                        } else {
                            return value;
                        }
                    },
                    toPercentage: function toPercentage(value) {
                        if (this.options.max === this.options.min) {
                            return 0;
                        }

                        if (this.options.ticks_positions.length > 0) {
                            var minv,
                                    maxv,
                                    minp,
                                    maxp = 0;
                            for (var i = 0; i < this.options.ticks.length; i++) {
                                if (value <= this.options.ticks[i]) {
                                    minv = i > 0 ? this.options.ticks[i - 1] : 0;
                                    minp = i > 0 ? this.options.ticks_positions[i - 1] : 0;
                                    maxv = this.options.ticks[i];
                                    maxp = this.options.ticks_positions[i];

                                    break;
                                }
                            }
                            if (i > 0) {
                                var partialPercentage = (value - minv) / (maxv - minv);
                                return minp + partialPercentage * (maxp - minp);
                            }
                        }

                        return 100 * (value - this.options.min) / (this.options.max - this.options.min);
                    }
                },

                logarithmic: {
                    /* Based on http://stackoverflow.com/questions/846221/logarithmic-slider */
                    toValue: function toValue(percentage) {
                        var min = this.options.min === 0 ? 0 : Math.log(this.options.min);
                        var max = Math.log(this.options.max);
                        var value = Math.exp(min + (max - min) * percentage / 100);
                        value = this.options.min + Math.round((value - this.options.min) / this.options.step) * this.options.step;
                        /* Rounding to the nearest step could exceed the min or
                         * max, so clip to those values. */
                        if (value < this.options.min) {
                            return this.options.min;
                        } else if (value > this.options.max) {
                            return this.options.max;
                        } else {
                            return value;
                        }
                    },
                    toPercentage: function toPercentage(value) {
                        if (this.options.max === this.options.min) {
                            return 0;
                        } else {
                            var max = Math.log(this.options.max);
                            var min = this.options.min === 0 ? 0 : Math.log(this.options.min);
                            var v = value === 0 ? 0 : Math.log(value);
                            return 100 * (v - min) / (max - min);
                        }
                    }
                }
            };

            /*************************************************
             CONSTRUCTOR
             **************************************************/
            Slider = function (element, options) {
                createNewSlider.call(this, element, options);
                return this;
            };

            function createNewSlider(element, options) {

                /*
                 The internal state object is used to store data about the current 'state' of slider.
                 This includes values such as the `value`, `enabled`, etc...
                 */
                this._state = {
                    value: null,
                    enabled: null,
                    offset: null,
                    size: null,
                    percentage: null,
                    inDrag: false,
                    over: false
                };

                if (typeof element === "string") {
                    this.element = document.querySelector(element);
                } else if (element instanceof HTMLElement) {
                    this.element = element;
                }

                /*************************************************
                 Process Options
                 **************************************************/
                options = options ? options : {};
                var optionTypes = Object.keys(this.defaultOptions);

                for (var i = 0; i < optionTypes.length; i++) {
                    var optName = optionTypes[i];

                    // First check if an option was passed in via the constructor
                    var val = options[optName];
                    // If no data attrib, then check data atrributes
                    val = typeof val !== 'undefined' ? val : getDataAttrib(this.element, optName);
                    // Finally, if nothing was specified, use the defaults
                    val = val !== null ? val : this.defaultOptions[optName];

                    // Set all options on the instance of the Slider
                    if (!this.options) {
                        this.options = {};
                    }
                    this.options[optName] = val;
                }

                /*
                 Validate `tooltip_position` against 'orientation`
                 - if `tooltip_position` is incompatible with orientation, swith it to a default compatible with specified `orientation`
                 -- default for "vertical" -> "right"
                 -- default for "horizontal" -> "left"
                 */
                if (this.options.orientation === "vertical" && (this.options.tooltip_position === "top" || this.options.tooltip_position === "bottom")) {

                    this.options.tooltip_position = "right";
                } else if (this.options.orientation === "horizontal" && (this.options.tooltip_position === "left" || this.options.tooltip_position === "right")) {

                    this.options.tooltip_position = "top";
                }

                function getDataAttrib(element, optName) {
                    var dataName = "data-slider-" + optName.replace(/_/g, '-');
                    var dataValString = element.getAttribute(dataName);

                    try {
                        return JSON.parse(dataValString);
                    } catch (err) {
                        return dataValString;
                    }
                }

                /*************************************************
                 Create Markup
                 **************************************************/

                var origWidth = this.element.style.width;
                var updateSlider = false;
                var parent = this.element.parentNode;
                var sliderTrackSelection;
                var sliderTrackLow, sliderTrackHigh;
                var sliderMinHandle;
                var sliderMaxHandle;

                if (this.sliderElem) {
                    updateSlider = true;
                } else {
                    /* Create elements needed for slider */
                    this.sliderElem = document.createElement("div");
                    this.sliderElem.className = "slider";

                    /* Create slider track elements */
                    var sliderTrack = document.createElement("div");
                    sliderTrack.className = "slider-track";

                    sliderTrackLow = document.createElement("div");
                    sliderTrackLow.className = "slider-track-low";

                    sliderTrackSelection = document.createElement("div");
                    sliderTrackSelection.className = "slider-selection";

                    sliderTrackHigh = document.createElement("div");
                    sliderTrackHigh.className = "slider-track-high";

                    sliderMinHandle = document.createElement("div");
                    sliderMinHandle.className = "slider-handle min-slider-handle";
                    sliderMinHandle.setAttribute('role', 'slider');
                    sliderMinHandle.setAttribute('aria-valuemin', this.options.min);
                    sliderMinHandle.setAttribute('aria-valuemax', this.options.max);

                    sliderMaxHandle = document.createElement("div");
                    sliderMaxHandle.className = "slider-handle max-slider-handle";
                    sliderMaxHandle.setAttribute('role', 'slider');
                    sliderMaxHandle.setAttribute('aria-valuemin', this.options.min);
                    sliderMaxHandle.setAttribute('aria-valuemax', this.options.max);

                    sliderTrack.appendChild(sliderTrackLow);
                    sliderTrack.appendChild(sliderTrackSelection);
                    sliderTrack.appendChild(sliderTrackHigh);

                    /* Add aria-labelledby to handle's */
                    var isLabelledbyArray = Array.isArray(this.options.labelledby);
                    if (isLabelledbyArray && this.options.labelledby[0]) {
                        sliderMinHandle.setAttribute('aria-labelledby', this.options.labelledby[0]);
                    }
                    if (isLabelledbyArray && this.options.labelledby[1]) {
                        sliderMaxHandle.setAttribute('aria-labelledby', this.options.labelledby[1]);
                    }
                    if (!isLabelledbyArray && this.options.labelledby) {
                        sliderMinHandle.setAttribute('aria-labelledby', this.options.labelledby);
                        sliderMaxHandle.setAttribute('aria-labelledby', this.options.labelledby);
                    }

                    /* Create ticks */
                    this.ticks = [];
                    if (Array.isArray(this.options.ticks) && this.options.ticks.length > 0) {
                        for (i = 0; i < this.options.ticks.length; i++) {
                            var tick = document.createElement('div');
                            tick.className = 'slider-tick';

                            this.ticks.push(tick);
                            sliderTrack.appendChild(tick);
                        }

                        sliderTrackSelection.className += " tick-slider-selection";
                    }

                    sliderTrack.appendChild(sliderMinHandle);
                    sliderTrack.appendChild(sliderMaxHandle);

                    this.tickLabels = [];
                    if (Array.isArray(this.options.ticks_labels) && this.options.ticks_labels.length > 0) {
                        this.tickLabelContainer = document.createElement('div');
                        this.tickLabelContainer.className = 'slider-tick-label-container';

                        for (i = 0; i < this.options.ticks_labels.length; i++) {
                            var label = document.createElement('div');
                            var noTickPositionsSpecified = this.options.ticks_positions.length === 0;
                            var tickLabelsIndex = this.options.reversed && noTickPositionsSpecified ? this.options.ticks_labels.length - (i + 1) : i;
                            label.className = 'slider-tick-label';
                            label.innerHTML = this.options.ticks_labels[tickLabelsIndex];

                            this.tickLabels.push(label);
                            this.tickLabelContainer.appendChild(label);
                        }
                    }

                    var createAndAppendTooltipSubElements = function createAndAppendTooltipSubElements(tooltipElem) {
                        var arrow = document.createElement("div");
                        arrow.className = "tooltip-arrow";

                        var inner = document.createElement("div");
                        inner.className = "tooltip-inner";

                        tooltipElem.appendChild(arrow);
                        tooltipElem.appendChild(inner);
                    };

                    /* Create tooltip elements */
                    var sliderTooltip = document.createElement("div");
                    sliderTooltip.className = "tooltip tooltip-main";
                    sliderTooltip.setAttribute('role', 'presentation');
                    createAndAppendTooltipSubElements(sliderTooltip);

                    var sliderTooltipMin = document.createElement("div");
                    sliderTooltipMin.className = "tooltip tooltip-min";
                    sliderTooltipMin.setAttribute('role', 'presentation');
                    createAndAppendTooltipSubElements(sliderTooltipMin);

                    var sliderTooltipMax = document.createElement("div");
                    sliderTooltipMax.className = "tooltip tooltip-max";
                    sliderTooltipMax.setAttribute('role', 'presentation');
                    createAndAppendTooltipSubElements(sliderTooltipMax);

                    /* Append components to sliderElem */
                    this.sliderElem.appendChild(sliderTrack);
                    this.sliderElem.appendChild(sliderTooltip);
                    this.sliderElem.appendChild(sliderTooltipMin);
                    this.sliderElem.appendChild(sliderTooltipMax);

                    if (this.tickLabelContainer) {
                        this.sliderElem.appendChild(this.tickLabelContainer);
                    }

                    /* Append slider element to parent container, right before the original <input> element */
                    parent.insertBefore(this.sliderElem, this.element);

                    /* Hide original <input> element */
                    this.element.style.display = "none";
                }
                /* If JQuery exists, cache JQ references */
                if ($) {
                    this.$element = $(this.element);
                    this.$sliderElem = $(this.sliderElem);
                }

                /*************************************************
                 Setup
                 **************************************************/
                this.eventToCallbackMap = {};
                this.sliderElem.id = this.options.id;

                this.touchCapable = 'ontouchstart' in window || window.DocumentTouch && document instanceof window.DocumentTouch;

                this.touchX = 0;
                this.touchY = 0;

                this.tooltip = this.sliderElem.querySelector('.tooltip-main');
                this.tooltipInner = this.tooltip.querySelector('.tooltip-inner');

                this.tooltip_min = this.sliderElem.querySelector('.tooltip-min');
                this.tooltipInner_min = this.tooltip_min.querySelector('.tooltip-inner');

                this.tooltip_max = this.sliderElem.querySelector('.tooltip-max');
                this.tooltipInner_max = this.tooltip_max.querySelector('.tooltip-inner');

                if (SliderScale[this.options.scale]) {
                    this.options.scale = SliderScale[this.options.scale];
                }

                if (updateSlider === true) {
                    // Reset classes
                    this._removeClass(this.sliderElem, 'slider-horizontal');
                    this._removeClass(this.sliderElem, 'slider-vertical');
                    this._removeClass(this.tooltip, 'hide');
                    this._removeClass(this.tooltip_min, 'hide');
                    this._removeClass(this.tooltip_max, 'hide');

                    // Undo existing inline styles for track
                    ["left", "top", "width", "height"].forEach(function (prop) {
                        this._removeProperty(this.trackLow, prop);
                        this._removeProperty(this.trackSelection, prop);
                        this._removeProperty(this.trackHigh, prop);
                    }, this);

                    // Undo inline styles on handles
                    [this.handle1, this.handle2].forEach(function (handle) {
                        this._removeProperty(handle, 'left');
                        this._removeProperty(handle, 'top');
                    }, this);

                    // Undo inline styles and classes on tooltips
                    [this.tooltip, this.tooltip_min, this.tooltip_max].forEach(function (tooltip) {
                        this._removeProperty(tooltip, 'left');
                        this._removeProperty(tooltip, 'top');
                        this._removeProperty(tooltip, 'margin-left');
                        this._removeProperty(tooltip, 'margin-top');

                        this._removeClass(tooltip, 'right');
                        this._removeClass(tooltip, 'top');
                    }, this);
                }

                if (this.options.orientation === 'vertical') {
                    this._addClass(this.sliderElem, 'slider-vertical');
                    this.stylePos = 'top';
                    this.mousePos = 'pageY';
                    this.sizePos = 'offsetHeight';
                } else {
                    this._addClass(this.sliderElem, 'slider-horizontal');
                    this.sliderElem.style.width = origWidth;
                    this.options.orientation = 'horizontal';
                    this.stylePos = 'left';
                    this.mousePos = 'pageX';
                    this.sizePos = 'offsetWidth';
                }
                this._setTooltipPosition();
                /* In case ticks are specified, overwrite the min and max bounds */
                if (Array.isArray(this.options.ticks) && this.options.ticks.length > 0) {
                    this.options.max = Math.max.apply(Math, this.options.ticks);
                    this.options.min = Math.min.apply(Math, this.options.ticks);
                }

                if (Array.isArray(this.options.value)) {
                    this.options.range = true;
                    this._state.value = this.options.value;
                } else if (this.options.range) {
                    // User wants a range, but value is not an array
                    this._state.value = [this.options.value, this.options.max];
                } else {
                    this._state.value = this.options.value;
                }

                this.trackLow = sliderTrackLow || this.trackLow;
                this.trackSelection = sliderTrackSelection || this.trackSelection;
                this.trackHigh = sliderTrackHigh || this.trackHigh;

                if (this.options.selection === 'none') {
                    this._addClass(this.trackLow, 'hide');
                    this._addClass(this.trackSelection, 'hide');
                    this._addClass(this.trackHigh, 'hide');
                }

                this.handle1 = sliderMinHandle || this.handle1;
                this.handle2 = sliderMaxHandle || this.handle2;

                if (updateSlider === true) {
                    // Reset classes
                    this._removeClass(this.handle1, 'round triangle');
                    this._removeClass(this.handle2, 'round triangle hide');

                    for (i = 0; i < this.ticks.length; i++) {
                        this._removeClass(this.ticks[i], 'round triangle hide');
                    }
                }

                var availableHandleModifiers = ['round', 'triangle', 'custom'];
                var isValidHandleType = availableHandleModifiers.indexOf(this.options.handle) !== -1;
                if (isValidHandleType) {
                    this._addClass(this.handle1, this.options.handle);
                    this._addClass(this.handle2, this.options.handle);

                    for (i = 0; i < this.ticks.length; i++) {
                        this._addClass(this.ticks[i], this.options.handle);
                    }
                }

                this._state.offset = this._offset(this.sliderElem);
                this._state.size = this.sliderElem[this.sizePos];
                this.setValue(this._state.value);

                /******************************************
                 Bind Event Listeners
                 ******************************************/

                    // Bind keyboard handlers
                this.handle1Keydown = this._keydown.bind(this, 0);
                this.handle1.addEventListener("keydown", this.handle1Keydown, false);

                this.handle2Keydown = this._keydown.bind(this, 1);
                this.handle2.addEventListener("keydown", this.handle2Keydown, false);

                this.mousedown = this._mousedown.bind(this);
                this.touchstart = this._touchstart.bind(this);
                this.touchmove = this._touchmove.bind(this);

                if (this.touchCapable) {
                    // Bind touch handlers
                    this.sliderElem.addEventListener("touchstart", this.touchstart, false);
                    this.sliderElem.addEventListener("touchmove", this.touchmove, false);
                }
                this.sliderElem.addEventListener("mousedown", this.mousedown, false);

                // Bind window handlers
                this.resize = this._resize.bind(this);
                window.addEventListener("resize", this.resize, false);

                // Bind tooltip-related handlers
                if (this.options.tooltip === 'hide') {
                    this._addClass(this.tooltip, 'hide');
                    this._addClass(this.tooltip_min, 'hide');
                    this._addClass(this.tooltip_max, 'hide');
                } else if (this.options.tooltip === 'always') {
                    this._showTooltip();
                    this._alwaysShowTooltip = true;
                } else {
                    this.showTooltip = this._showTooltip.bind(this);
                    this.hideTooltip = this._hideTooltip.bind(this);

                    this.sliderElem.addEventListener("mouseenter", this.showTooltip, false);
                    this.sliderElem.addEventListener("mouseleave", this.hideTooltip, false);

                    this.handle1.addEventListener("focus", this.showTooltip, false);
                    this.handle1.addEventListener("blur", this.hideTooltip, false);

                    this.handle2.addEventListener("focus", this.showTooltip, false);
                    this.handle2.addEventListener("blur", this.hideTooltip, false);
                }

                if (this.options.enabled) {
                    this.enable();
                } else {
                    this.disable();
                }
            }

            /*************************************************
             INSTANCE PROPERTIES/METHODS
             - Any methods bound to the prototype are considered
             part of the plugin's `public` interface
             **************************************************/
            Slider.prototype = {
                _init: function _init() {}, // NOTE: Must exist to support bridget

                constructor: Slider,

                defaultOptions: {
                    id: "",
                    min: 0,
                    max: 10,
                    step: 1,
                    precision: 0,
                    orientation: 'horizontal',
                    value: 5,
                    range: false,
                    selection: 'before',
                    tooltip: 'show',
                    tooltip_split: false,
                    handle: 'round',
                    reversed: false,
                    enabled: true,
                    formatter: function formatter(val) {
                        if (Array.isArray(val)) {
                            return val[0] + " : " + val[1];
                        } else {
                            return val;
                        }
                    },
                    natural_arrow_keys: false,
                    ticks: [],
                    ticks_positions: [],
                    ticks_labels: [],
                    ticks_snap_bounds: 0,
                    scale: 'linear',
                    focus: false,
                    tooltip_position: null,
                    labelledby: null
                },

                getElement: function getElement() {
                    return this.sliderElem;
                },

                getValue: function getValue() {
                    if (this.options.range) {
                        return this._state.value;
                    } else {
                        return this._state.value[0];
                    }
                },

                setValue: function setValue(val, triggerSlideEvent, triggerChangeEvent) {
                    if (!val) {
                        val = 0;
                    }
                    var oldValue = this.getValue();
                    this._state.value = this._validateInputValue(val);
                    var applyPrecision = this._applyPrecision.bind(this);

                    if (this.options.range) {
                        this._state.value[0] = applyPrecision(this._state.value[0]);
                        this._state.value[1] = applyPrecision(this._state.value[1]);

                        this._state.value[0] = Math.max(this.options.min, Math.min(this.options.max, this._state.value[0]));
                        this._state.value[1] = Math.max(this.options.min, Math.min(this.options.max, this._state.value[1]));
                    } else {
                        this._state.value = applyPrecision(this._state.value);
                        this._state.value = [Math.max(this.options.min, Math.min(this.options.max, this._state.value))];
                        this._addClass(this.handle2, 'hide');
                        if (this.options.selection === 'after') {
                            this._state.value[1] = this.options.max;
                        } else {
                            this._state.value[1] = this.options.min;
                        }
                    }

                    if (this.options.max > this.options.min) {
                        this._state.percentage = [this._toPercentage(this._state.value[0]), this._toPercentage(this._state.value[1]), this.options.step * 100 / (this.options.max - this.options.min)];
                    } else {
                        this._state.percentage = [0, 0, 100];
                    }

                    this._layout();
                    var newValue = this.options.range ? this._state.value : this._state.value[0];

                    this._setDataVal(newValue);
                    if (triggerSlideEvent === true) {
                        this._trigger('slide', newValue);
                    }
                    if (oldValue !== newValue && triggerChangeEvent === true) {
                        this._trigger('change', {
                            oldValue: oldValue,
                            newValue: newValue
                        });
                    }

                    return this;
                },

                destroy: function destroy() {
                    // Remove event handlers on slider elements
                    this._removeSliderEventHandlers();

                    // Remove the slider from the DOM
                    this.sliderElem.parentNode.removeChild(this.sliderElem);
                    /* Show original <input> element */
                    this.element.style.display = "";

                    // Clear out custom event bindings
                    this._cleanUpEventCallbacksMap();

                    // Remove data values
                    this.element.removeAttribute("data");

                    // Remove JQuery handlers/data
                    if ($) {
                        this._unbindJQueryEventHandlers();
                        this.$element.removeData('slider');
                    }
                },

                disable: function disable() {
                    this._state.enabled = false;
                    this.handle1.removeAttribute("tabindex");
                    this.handle2.removeAttribute("tabindex");
                    this._addClass(this.sliderElem, 'slider-disabled');
                    this._trigger('slideDisabled');

                    return this;
                },

                enable: function enable() {
                    this._state.enabled = true;
                    this.handle1.setAttribute("tabindex", 0);
                    this.handle2.setAttribute("tabindex", 0);
                    this._removeClass(this.sliderElem, 'slider-disabled');
                    this._trigger('slideEnabled');

                    return this;
                },

                toggle: function toggle() {
                    if (this._state.enabled) {
                        this.disable();
                    } else {
                        this.enable();
                    }
                    return this;
                },

                isEnabled: function isEnabled() {
                    return this._state.enabled;
                },

                on: function on(evt, callback) {
                    this._bindNonQueryEventHandler(evt, callback);
                    return this;
                },

                off: function off(evt, callback) {
                    if ($) {
                        this.$element.off(evt, callback);
                        this.$sliderElem.off(evt, callback);
                    } else {
                        this._unbindNonQueryEventHandler(evt, callback);
                    }
                },

                getAttribute: function getAttribute(attribute) {
                    if (attribute) {
                        return this.options[attribute];
                    } else {
                        return this.options;
                    }
                },

                setAttribute: function setAttribute(attribute, value) {
                    this.options[attribute] = value;
                    return this;
                },

                refresh: function refresh() {
                    this._removeSliderEventHandlers();
                    createNewSlider.call(this, this.element, this.options);
                    if ($) {
                        // Bind new instance of slider to the element
                        $.data(this.element, 'slider', this);
                    }
                    return this;
                },

                relayout: function relayout() {
                    this._resize();
                    this._layout();
                    return this;
                },

                /******************************+
                 HELPERS
                 - Any method that is not part of the public interface.
                 - Place it underneath this comment block and write its signature like so:
                 _fnName : function() {...}
                 ********************************/
                _removeSliderEventHandlers: function _removeSliderEventHandlers() {
                    // Remove keydown event listeners
                    this.handle1.removeEventListener("keydown", this.handle1Keydown, false);
                    this.handle2.removeEventListener("keydown", this.handle2Keydown, false);

                    if (this.showTooltip) {
                        this.handle1.removeEventListener("focus", this.showTooltip, false);
                        this.handle2.removeEventListener("focus", this.showTooltip, false);
                    }
                    if (this.hideTooltip) {
                        this.handle1.removeEventListener("blur", this.hideTooltip, false);
                        this.handle2.removeEventListener("blur", this.hideTooltip, false);
                    }

                    // Remove event listeners from sliderElem
                    if (this.showTooltip) {
                        this.sliderElem.removeEventListener("mouseenter", this.showTooltip, false);
                    }
                    if (this.hideTooltip) {
                        this.sliderElem.removeEventListener("mouseleave", this.hideTooltip, false);
                    }
                    this.sliderElem.removeEventListener("touchstart", this.touchstart, false);
                    this.sliderElem.removeEventListener("touchmove", this.touchmove, false);
                    this.sliderElem.removeEventListener("mousedown", this.mousedown, false);

                    // Remove window event listener
                    window.removeEventListener("resize", this.resize, false);
                },
                _bindNonQueryEventHandler: function _bindNonQueryEventHandler(evt, callback) {
                    if (this.eventToCallbackMap[evt] === undefined) {
                        this.eventToCallbackMap[evt] = [];
                    }
                    this.eventToCallbackMap[evt].push(callback);
                },
                _unbindNonQueryEventHandler: function _unbindNonQueryEventHandler(evt, callback) {
                    var callbacks = this.eventToCallbackMap[evt];
                    if (callbacks !== undefined) {
                        for (var i = 0; i < callbacks.length; i++) {
                            if (callbacks[i] === callback) {
                                callbacks.splice(i, 1);
                                break;
                            }
                        }
                    }
                },
                _cleanUpEventCallbacksMap: function _cleanUpEventCallbacksMap() {
                    var eventNames = Object.keys(this.eventToCallbackMap);
                    for (var i = 0; i < eventNames.length; i++) {
                        var eventName = eventNames[i];
                        this.eventToCallbackMap[eventName] = null;
                    }
                },
                _showTooltip: function _showTooltip() {
                    if (this.options.tooltip_split === false) {
                        this._addClass(this.tooltip, 'in');
                        this.tooltip_min.style.display = 'none';
                        this.tooltip_max.style.display = 'none';
                    } else {
                        this._addClass(this.tooltip_min, 'in');
                        this._addClass(this.tooltip_max, 'in');
                        this.tooltip.style.display = 'none';
                    }
                    this._state.over = true;
                },
                _hideTooltip: function _hideTooltip() {
                    if (this._state.inDrag === false && this.alwaysShowTooltip !== true) {
                        this._removeClass(this.tooltip, 'in');
                        this._removeClass(this.tooltip_min, 'in');
                        this._removeClass(this.tooltip_max, 'in');
                    }
                    this._state.over = false;
                },
                _layout: function _layout() {
                    var positionPercentages;

                    if (this.options.reversed) {
                        positionPercentages = [100 - this._state.percentage[0], this.options.range ? 100 - this._state.percentage[1] : this._state.percentage[1]];
                    } else {
                        positionPercentages = [this._state.percentage[0], this._state.percentage[1]];
                    }

                    this.handle1.style[this.stylePos] = positionPercentages[0] + '%';
                    this.handle1.setAttribute('aria-valuenow', this._state.value[0]);

                    this.handle2.style[this.stylePos] = positionPercentages[1] + '%';
                    this.handle2.setAttribute('aria-valuenow', this._state.value[1]);

                    /* Position ticks and labels */
                    if (Array.isArray(this.options.ticks) && this.options.ticks.length > 0) {

                        var styleSize = this.options.orientation === 'vertical' ? 'height' : 'width';
                        var styleMargin = this.options.orientation === 'vertical' ? 'marginTop' : 'marginLeft';
                        var labelSize = this._state.size / (this.options.ticks.length - 1);

                        if (this.tickLabelContainer) {
                            var extraMargin = 0;
                            if (this.options.ticks_positions.length === 0) {
                                if (this.options.orientation !== 'vertical') {
                                    this.tickLabelContainer.style[styleMargin] = -labelSize / 2 + 'px';
                                }

                                extraMargin = this.tickLabelContainer.offsetHeight;
                            } else {
                                /* Chidren are position absolute, calculate height by finding the max offsetHeight of a child */
                                for (i = 0; i < this.tickLabelContainer.childNodes.length; i++) {
                                    if (this.tickLabelContainer.childNodes[i].offsetHeight > extraMargin) {
                                        extraMargin = this.tickLabelContainer.childNodes[i].offsetHeight;
                                    }
                                }
                            }
                            if (this.options.orientation === 'horizontal') {
                                this.sliderElem.style.marginBottom = extraMargin + 'px';
                            }
                        }
                        for (var i = 0; i < this.options.ticks.length; i++) {

                            var percentage = this.options.ticks_positions[i] || this._toPercentage(this.options.ticks[i]);

                            if (this.options.reversed) {
                                percentage = 100 - percentage;
                            }

                            this.ticks[i].style[this.stylePos] = percentage + '%';

                            /* Set class labels to denote whether ticks are in the selection */
                            this._removeClass(this.ticks[i], 'in-selection');
                            if (!this.options.range) {
                                if (this.options.selection === 'after' && percentage >= positionPercentages[0]) {
                                    this._addClass(this.ticks[i], 'in-selection');
                                } else if (this.options.selection === 'before' && percentage <= positionPercentages[0]) {
                                    this._addClass(this.ticks[i], 'in-selection');
                                }
                            } else if (percentage >= positionPercentages[0] && percentage <= positionPercentages[1]) {
                                this._addClass(this.ticks[i], 'in-selection');
                            }

                            if (this.tickLabels[i]) {
                                this.tickLabels[i].style[styleSize] = labelSize + 'px';

                                if (this.options.orientation !== 'vertical' && this.options.ticks_positions[i] !== undefined) {
                                    this.tickLabels[i].style.position = 'absolute';
                                    this.tickLabels[i].style[this.stylePos] = percentage + '%';
                                    this.tickLabels[i].style[styleMargin] = -labelSize / 2 + 'px';
                                } else if (this.options.orientation === 'vertical') {
                                    this.tickLabels[i].style['marginLeft'] = this.sliderElem.offsetWidth + 'px';
                                    this.tickLabelContainer.style['marginTop'] = this.sliderElem.offsetWidth / 2 * -1 + 'px';
                                }
                            }
                        }
                    }

                    var formattedTooltipVal;

                    if (this.options.range) {
                        formattedTooltipVal = this.options.formatter(this._state.value);
                        this._setText(this.tooltipInner, formattedTooltipVal);
                        this.tooltip.style[this.stylePos] = (positionPercentages[1] + positionPercentages[0]) / 2 + '%';

                        if (this.options.orientation === 'vertical') {
                            this._css(this.tooltip, 'margin-top', -this.tooltip.offsetHeight / 2 + 'px');
                        } else {
                            this._css(this.tooltip, 'margin-left', -this.tooltip.offsetWidth / 2 + 'px');
                        }

                        if (this.options.orientation === 'vertical') {
                            this._css(this.tooltip, 'margin-top', -this.tooltip.offsetHeight / 2 + 'px');
                        } else {
                            this._css(this.tooltip, 'margin-left', -this.tooltip.offsetWidth / 2 + 'px');
                        }

                        var innerTooltipMinText = this.options.formatter(this._state.value[0]);
                        this._setText(this.tooltipInner_min, innerTooltipMinText);

                        var innerTooltipMaxText = this.options.formatter(this._state.value[1]);
                        this._setText(this.tooltipInner_max, innerTooltipMaxText);

                        this.tooltip_min.style[this.stylePos] = positionPercentages[0] + '%';

                        if (this.options.orientation === 'vertical') {
                            this._css(this.tooltip_min, 'margin-top', -this.tooltip_min.offsetHeight / 2 + 'px');
                        } else {
                            this._css(this.tooltip_min, 'margin-left', -this.tooltip_min.offsetWidth / 2 + 'px');
                        }

                        this.tooltip_max.style[this.stylePos] = positionPercentages[1] + '%';

                        if (this.options.orientation === 'vertical') {
                            this._css(this.tooltip_max, 'margin-top', -this.tooltip_max.offsetHeight / 2 + 'px');
                        } else {
                            this._css(this.tooltip_max, 'margin-left', -this.tooltip_max.offsetWidth / 2 + 'px');
                        }
                    } else {
                        formattedTooltipVal = this.options.formatter(this._state.value[0]);
                        this._setText(this.tooltipInner, formattedTooltipVal);

                        this.tooltip.style[this.stylePos] = positionPercentages[0] + '%';
                        if (this.options.orientation === 'vertical') {
                            this._css(this.tooltip, 'margin-top', -this.tooltip.offsetHeight / 2 + 'px');
                        } else {
                            this._css(this.tooltip, 'margin-left', -this.tooltip.offsetWidth / 2 + 'px');
                        }
                    }

                    if (this.options.orientation === 'vertical') {
                        this.trackLow.style.top = '0';
                        this.trackLow.style.height = Math.min(positionPercentages[0], positionPercentages[1]) + '%';

                        this.trackSelection.style.top = Math.min(positionPercentages[0], positionPercentages[1]) + '%';
                        this.trackSelection.style.height = Math.abs(positionPercentages[0] - positionPercentages[1]) + '%';

                        this.trackHigh.style.bottom = '0';
                        this.trackHigh.style.height = 100 - Math.min(positionPercentages[0], positionPercentages[1]) - Math.abs(positionPercentages[0] - positionPercentages[1]) + '%';
                    } else {
                        this.trackLow.style.left = '0';
                        this.trackLow.style.width = Math.min(positionPercentages[0], positionPercentages[1]) + '%';

                        this.trackSelection.style.left = Math.min(positionPercentages[0], positionPercentages[1]) + '%';
                        this.trackSelection.style.width = Math.abs(positionPercentages[0] - positionPercentages[1]) + '%';

                        this.trackHigh.style.right = '0';
                        this.trackHigh.style.width = 100 - Math.min(positionPercentages[0], positionPercentages[1]) - Math.abs(positionPercentages[0] - positionPercentages[1]) + '%';

                        var offset_min = this.tooltip_min.getBoundingClientRect();
                        var offset_max = this.tooltip_max.getBoundingClientRect();

                        if (this.options.tooltip_position === 'bottom') {
                            if (offset_min.right > offset_max.left) {
                                this._removeClass(this.tooltip_max, 'bottom');
                                this._addClass(this.tooltip_max, 'top');
                                this.tooltip_max.style.top = '';
                                this.tooltip_max.style.bottom = 22 + 'px';
                            } else {
                                this._removeClass(this.tooltip_max, 'top');
                                this._addClass(this.tooltip_max, 'bottom');
                                this.tooltip_max.style.top = this.tooltip_min.style.top;
                                this.tooltip_max.style.bottom = '';
                            }
                        } else {
                            if (offset_min.right > offset_max.left) {
                                this._removeClass(this.tooltip_max, 'top');
                                this._addClass(this.tooltip_max, 'bottom');
                                this.tooltip_max.style.top = 18 + 'px';
                            } else {
                                this._removeClass(this.tooltip_max, 'bottom');
                                this._addClass(this.tooltip_max, 'top');
                                this.tooltip_max.style.top = this.tooltip_min.style.top;
                            }
                        }
                    }
                },
                _resize: function _resize(ev) {
                    /*jshint unused:false*/
                    this._state.offset = this._offset(this.sliderElem);
                    this._state.size = this.sliderElem[this.sizePos];
                    this._layout();
                },
                _removeProperty: function _removeProperty(element, prop) {
                    if (element.style.removeProperty) {
                        element.style.removeProperty(prop);
                    } else {
                        element.style.removeAttribute(prop);
                    }
                },
                _mousedown: function _mousedown(ev) {
                    if (!this._state.enabled) {
                        return false;
                    }

                    this._state.offset = this._offset(this.sliderElem);
                    this._state.size = this.sliderElem[this.sizePos];

                    var percentage = this._getPercentage(ev);

                    if (this.options.range) {
                        var diff1 = Math.abs(this._state.percentage[0] - percentage);
                        var diff2 = Math.abs(this._state.percentage[1] - percentage);
                        this._state.dragged = diff1 < diff2 ? 0 : 1;
                        this._adjustPercentageForRangeSliders(percentage);
                    } else {
                        this._state.dragged = 0;
                    }

                    this._state.percentage[this._state.dragged] = percentage;
                    this._layout();

                    if (this.touchCapable) {
                        document.removeEventListener("touchmove", this.mousemove, false);
                        document.removeEventListener("touchend", this.mouseup, false);
                    }

                    if (this.mousemove) {
                        document.removeEventListener("mousemove", this.mousemove, false);
                    }
                    if (this.mouseup) {
                        document.removeEventListener("mouseup", this.mouseup, false);
                    }

                    this.mousemove = this._mousemove.bind(this);
                    this.mouseup = this._mouseup.bind(this);

                    if (this.touchCapable) {
                        // Touch: Bind touch events:
                        document.addEventListener("touchmove", this.mousemove, false);
                        document.addEventListener("touchend", this.mouseup, false);
                    }
                    // Bind mouse events:
                    document.addEventListener("mousemove", this.mousemove, false);
                    document.addEventListener("mouseup", this.mouseup, false);

                    this._state.inDrag = true;
                    var newValue = this._calculateValue();

                    this._trigger('slideStart', newValue);

                    this._setDataVal(newValue);
                    this.setValue(newValue, false, true);

                    this._pauseEvent(ev);

                    if (this.options.focus) {
                        this._triggerFocusOnHandle(this._state.dragged);
                    }

                    return true;
                },
                _touchstart: function _touchstart(ev) {
                    if (ev.changedTouches === undefined) {
                        this._mousedown(ev);
                        return;
                    }

                    var touch = ev.changedTouches[0];
                    this.touchX = touch.pageX;
                    this.touchY = touch.pageY;
                },
                _triggerFocusOnHandle: function _triggerFocusOnHandle(handleIdx) {
                    if (handleIdx === 0) {
                        this.handle1.focus();
                    }
                    if (handleIdx === 1) {
                        this.handle2.focus();
                    }
                },
                _keydown: function _keydown(handleIdx, ev) {
                    if (!this._state.enabled) {
                        return false;
                    }

                    var dir;
                    switch (ev.keyCode) {
                        case 37: // left
                        case 40:
                            // down
                            dir = -1;
                            break;
                        case 39: // right
                        case 38:
                            // up
                            dir = 1;
                            break;
                    }
                    if (!dir) {
                        return;
                    }

                    // use natural arrow keys instead of from min to max
                    if (this.options.natural_arrow_keys) {
                        var ifVerticalAndNotReversed = this.options.orientation === 'vertical' && !this.options.reversed;
                        var ifHorizontalAndReversed = this.options.orientation === 'horizontal' && this.options.reversed;

                        if (ifVerticalAndNotReversed || ifHorizontalAndReversed) {
                            dir = -dir;
                        }
                    }

                    var val = this._state.value[handleIdx] + dir * this.options.step;
                    if (this.options.range) {
                        val = [!handleIdx ? val : this._state.value[0], handleIdx ? val : this._state.value[1]];
                    }

                    this._trigger('slideStart', val);
                    this._setDataVal(val);
                    this.setValue(val, true, true);

                    this._setDataVal(val);
                    this._trigger('slideStop', val);
                    this._layout();

                    this._pauseEvent(ev);

                    return false;
                },
                _pauseEvent: function _pauseEvent(ev) {
                    if (ev.stopPropagation) {
                        ev.stopPropagation();
                    }
                    if (ev.preventDefault) {
                        ev.preventDefault();
                    }
                    ev.cancelBubble = true;
                    ev.returnValue = false;
                },
                _mousemove: function _mousemove(ev) {
                    if (!this._state.enabled) {
                        return false;
                    }

                    var percentage = this._getPercentage(ev);
                    this._adjustPercentageForRangeSliders(percentage);
                    this._state.percentage[this._state.dragged] = percentage;
                    this._layout();

                    var val = this._calculateValue(true);
                    this.setValue(val, true, true);

                    return false;
                },
                _touchmove: function _touchmove(ev) {
                    if (ev.changedTouches === undefined) {
                        return;
                    }

                    var touch = ev.changedTouches[0];

                    var xDiff = touch.pageX - this.touchX;
                    var yDiff = touch.pageY - this.touchY;

                    if (!this._state.inDrag) {
                        // Vertical Slider
                        if (this.options.orientation === 'vertical' && xDiff <= 5 && xDiff >= -5 && (yDiff >= 15 || yDiff <= -15)) {
                            this._mousedown(ev);
                        }
                        // Horizontal slider.
                        else if (yDiff <= 5 && yDiff >= -5 && (xDiff >= 15 || xDiff <= -15)) {
                            this._mousedown(ev);
                        }
                    }
                },
                _adjustPercentageForRangeSliders: function _adjustPercentageForRangeSliders(percentage) {
                    if (this.options.range) {
                        var precision = this._getNumDigitsAfterDecimalPlace(percentage);
                        precision = precision ? precision - 1 : 0;
                        var percentageWithAdjustedPrecision = this._applyToFixedAndParseFloat(percentage, precision);
                        if (this._state.dragged === 0 && this._applyToFixedAndParseFloat(this._state.percentage[1], precision) < percentageWithAdjustedPrecision) {
                            this._state.percentage[0] = this._state.percentage[1];
                            this._state.dragged = 1;
                        } else if (this._state.dragged === 1 && this._applyToFixedAndParseFloat(this._state.percentage[0], precision) > percentageWithAdjustedPrecision) {
                            this._state.percentage[1] = this._state.percentage[0];
                            this._state.dragged = 0;
                        }
                    }
                },
                _mouseup: function _mouseup() {
                    if (!this._state.enabled) {
                        return false;
                    }
                    if (this.touchCapable) {
                        // Touch: Unbind touch event handlers:
                        document.removeEventListener("touchmove", this.mousemove, false);
                        document.removeEventListener("touchend", this.mouseup, false);
                    }
                    // Unbind mouse event handlers:
                    document.removeEventListener("mousemove", this.mousemove, false);
                    document.removeEventListener("mouseup", this.mouseup, false);

                    this._state.inDrag = false;
                    if (this._state.over === false) {
                        this._hideTooltip();
                    }
                    var val = this._calculateValue(true);

                    this._layout();
                    this._setDataVal(val);
                    this._trigger('slideStop', val);

                    return false;
                },
                _calculateValue: function _calculateValue(snapToClosestTick) {
                    var val;
                    if (this.options.range) {
                        val = [this.options.min, this.options.max];
                        if (this._state.percentage[0] !== 0) {
                            val[0] = this._toValue(this._state.percentage[0]);
                            val[0] = this._applyPrecision(val[0]);
                        }
                        if (this._state.percentage[1] !== 100) {
                            val[1] = this._toValue(this._state.percentage[1]);
                            val[1] = this._applyPrecision(val[1]);
                        }
                    } else {
                        val = this._toValue(this._state.percentage[0]);
                        val = parseFloat(val);
                        val = this._applyPrecision(val);
                    }

                    if (snapToClosestTick) {
                        var min = [val, Infinity];
                        for (var i = 0; i < this.options.ticks.length; i++) {
                            var diff = Math.abs(this.options.ticks[i] - val);
                            if (diff <= min[1]) {
                                min = [this.options.ticks[i], diff];
                            }
                        }
                        if (min[1] <= this.options.ticks_snap_bounds) {
                            return min[0];
                        }
                    }

                    return val;
                },
                _applyPrecision: function _applyPrecision(val) {
                    var precision = this.options.precision || this._getNumDigitsAfterDecimalPlace(this.options.step);
                    return this._applyToFixedAndParseFloat(val, precision);
                },
                _getNumDigitsAfterDecimalPlace: function _getNumDigitsAfterDecimalPlace(num) {
                    var match = ('' + num).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
                    if (!match) {
                        return 0;
                    }
                    return Math.max(0, (match[1] ? match[1].length : 0) - (match[2] ? +match[2] : 0));
                },
                _applyToFixedAndParseFloat: function _applyToFixedAndParseFloat(num, toFixedInput) {
                    var truncatedNum = num.toFixed(toFixedInput);
                    return parseFloat(truncatedNum);
                },
                /*
                 Credits to Mike Samuel for the following method!
                 Source: http://stackoverflow.com/questions/10454518/javascript-how-to-retrieve-the-number-of-decimals-of-a-string-number
                 */
                _getPercentage: function _getPercentage(ev) {
                    if (this.touchCapable && (ev.type === 'touchstart' || ev.type === 'touchmove')) {
                        ev = ev.touches[0];
                    }

                    var eventPosition = ev[this.mousePos];
                    var sliderOffset = this._state.offset[this.stylePos];
                    var distanceToSlide = eventPosition - sliderOffset;
                    // Calculate what percent of the length the slider handle has slid
                    var percentage = distanceToSlide / this._state.size * 100;
                    percentage = Math.round(percentage / this._state.percentage[2]) * this._state.percentage[2];
                    if (this.options.reversed) {
                        percentage = 100 - percentage;
                    }

                    // Make sure the percent is within the bounds of the slider.
                    // 0% corresponds to the 'min' value of the slide
                    // 100% corresponds to the 'max' value of the slide
                    return Math.max(0, Math.min(100, percentage));
                },
                _validateInputValue: function _validateInputValue(val) {
                    if (typeof val === 'number') {
                        return val;
                    } else if (Array.isArray(val)) {
                        this._validateArray(val);
                        return val;
                    } else {
                        throw new Error(ErrorMsgs.formatInvalidInputErrorMsg(val));
                    }
                },
                _validateArray: function _validateArray(val) {
                    for (var i = 0; i < val.length; i++) {
                        var input = val[i];
                        if (typeof input !== 'number') {
                            throw new Error(ErrorMsgs.formatInvalidInputErrorMsg(input));
                        }
                    }
                },
                _setDataVal: function _setDataVal(val) {
                    this.element.setAttribute('data-value', val);
                    this.element.setAttribute('value', val);
                    this.element.value = val;
                },
                _trigger: function _trigger(evt, val) {
                    val = val || val === 0 ? val : undefined;

                    var callbackFnArray = this.eventToCallbackMap[evt];
                    if (callbackFnArray && callbackFnArray.length) {
                        for (var i = 0; i < callbackFnArray.length; i++) {
                            var callbackFn = callbackFnArray[i];
                            callbackFn(val);
                        }
                    }

                    /* If JQuery exists, trigger JQuery events */
                    if ($) {
                        this._triggerJQueryEvent(evt, val);
                    }
                },
                _triggerJQueryEvent: function _triggerJQueryEvent(evt, val) {
                    var eventData = {
                        type: evt,
                        value: val
                    };
                    this.$element.trigger(eventData);
                    this.$sliderElem.trigger(eventData);
                },
                _unbindJQueryEventHandlers: function _unbindJQueryEventHandlers() {
                    this.$element.off();
                    this.$sliderElem.off();
                },
                _setText: function _setText(element, text) {
                    if (typeof element.textContent !== "undefined") {
                        element.textContent = text;
                    } else if (typeof element.innerText !== "undefined") {
                        element.innerText = text;
                    }
                },
                _removeClass: function _removeClass(element, classString) {
                    var classes = classString.split(" ");
                    var newClasses = element.className;

                    for (var i = 0; i < classes.length; i++) {
                        var classTag = classes[i];
                        var regex = new RegExp("(?:\\s|^)" + classTag + "(?:\\s|$)");
                        newClasses = newClasses.replace(regex, " ");
                    }

                    element.className = newClasses.trim();
                },
                _addClass: function _addClass(element, classString) {
                    var classes = classString.split(" ");
                    var newClasses = element.className;

                    for (var i = 0; i < classes.length; i++) {
                        var classTag = classes[i];
                        var regex = new RegExp("(?:\\s|^)" + classTag + "(?:\\s|$)");
                        var ifClassExists = regex.test(newClasses);

                        if (!ifClassExists) {
                            newClasses += " " + classTag;
                        }
                    }

                    element.className = newClasses.trim();
                },
                _offsetLeft: function _offsetLeft(obj) {
                    return obj.getBoundingClientRect().left;
                },
                _offsetTop: function _offsetTop(obj) {
                    var offsetTop = obj.offsetTop;
                    while ((obj = obj.offsetParent) && !isNaN(obj.offsetTop)) {
                        offsetTop += obj.offsetTop;
                        if (obj.tagName !== 'BODY') {
                            offsetTop -= obj.scrollTop;
                        }
                    }
                    return offsetTop;
                },
                _offset: function _offset(obj) {
                    return {
                        left: this._offsetLeft(obj),
                        top: this._offsetTop(obj)
                    };
                },
                _css: function _css(elementRef, styleName, value) {
                    if ($) {
                        $.style(elementRef, styleName, value);
                    } else {
                        var style = styleName.replace(/^-ms-/, "ms-").replace(/-([\da-z])/gi, function (all, letter) {
                            return letter.toUpperCase();
                        });
                        elementRef.style[style] = value;
                    }
                },
                _toValue: function _toValue(percentage) {
                    return this.options.scale.toValue.apply(this, [percentage]);
                },
                _toPercentage: function _toPercentage(value) {
                    return this.options.scale.toPercentage.apply(this, [value]);
                },
                _setTooltipPosition: function _setTooltipPosition() {
                    var tooltips = [this.tooltip, this.tooltip_min, this.tooltip_max];
                    if (this.options.orientation === 'vertical') {
                        var tooltipPos = this.options.tooltip_position || 'right';
                        var oppositeSide = tooltipPos === 'left' ? 'right' : 'left';
                        tooltips.forEach((function (tooltip) {
                            this._addClass(tooltip, tooltipPos);
                            tooltip.style[oppositeSide] = '100%';
                        }).bind(this));
                    } else if (this.options.tooltip_position === 'bottom') {
                        tooltips.forEach((function (tooltip) {
                            this._addClass(tooltip, 'bottom');
                            tooltip.style.top = 22 + 'px';
                        }).bind(this));
                    } else {
                        tooltips.forEach((function (tooltip) {
                            this._addClass(tooltip, 'top');
                            tooltip.style.top = -this.tooltip.outerHeight - 14 + 'px';
                        }).bind(this));
                    }
                }
            };

            /*********************************
             Attach to global namespace
             *********************************/
            if ($) {
                var namespace = $.fn.slider ? 'bootstrapSlider' : 'slider';
                $.bridget(namespace, Slider);

                // Auto-Register data-provide="slider" Elements
                $(function () {
                    $("input[data-provide=slider]")[namespace]();
                });
            }
        })($);

        return Slider;
    });

</script>

<script type="text/ng-template" id="airportsTypeAhead.html">
  <a>
    <span ng-bind-html="match.model.label | uibTypeaheadHighlight:query"></span>
  </a>
</script>

<div class="bg-color" ng-hide="ctrl.loading">
  <div class="top_filter_nav">
    <div class="container modify-container">
      <div class="row">
        <div class="col-sm-9" ng-repeat="search_activity in ctrl.search_activities_static">
          <h4 class="places-con"> 
            {{ctrl.airportForId(search_activity.departure_airport_id).name}} >> {{ctrl.airportForId(search_activity.arrival_airport_id).name}} | {{ctrl.formatTime(search_activity.start_at).split(',')[0]}}
          </h4>
        </div>
        <div class="col-sm-3 text-right"> 
          <img ng-click="custom2 =! custom2" src="http://d3tfanr7troppj.cloudfront.net/static_files/images/000/000/323/original/filter.png?1467267999" class="filter-icon" alt="filter"> 
        </div>
      </div>
    </div>
  </div>
  <div class="filter-toggle-main" ng-show="custom2">
    <div class="container">
      <div class="search-form-con">

        <!-- search con start -->
        <div class="search-edit-form" ng-hide="ctrl.disable_">
          <div class="row">

            <div class="col-xs-12 search-main-container">
              <div class="search-con">
                <span class="search-main-form autocomplete-height" ng-repeat="search_activity in ctrl.search_activities">
                  <span class="search-form">
                    <span class="search-icon departure-icon"></span>
                    <input class="search-textfield" title="Departure Airport"
                           ng-disabled="$index+1 < ctrl.search_activities.length"
                           placeholder="Departure"
                           autocomplete="off"
                           typeahead-editable="false"
                           typeahead-select-on-exact="true"
                           typeahead-template-url="airportsTypeAhead.html"
                           ng-model="search_activity.departure_airport"
                           uib-typeahead="airport as airport.label for airport in ctrl.airports | filter:{label:$viewValue}"
                           type="text"
                           typeahead-min-length="0">
                  </span>
                  <span class="search-form">
                    <span class="search-icon arrival-icon"></span>
                    <input class="search-textfield" title="Arrival Airport"
                           ng-disabled="$index+1 < ctrl.search_activities.length"
                           placeholder="Arrival"
                           autocomplete="off"
                           typeahead-editable="false"
                           typeahead-select-on-exact="true"
                           typeahead-template-url="airportsTypeAhead.html"
                           ng-model="search_activity.arrival_airport"
                           uib-typeahead="airport as airport.label for airport in ctrl.airports | filter:{label:$viewValue}"
                           type="text"
                           typeahead-min-length="0">
                  </span>
                  <span class="search-form">
                    <span class="search-icon pax-icon"></span>
                    <input class="search-textfield pax-textfield" type="text"
                           ng-model="search_activity.pax"
                           autocomplete="off"
                           typeahead-editable="false"
                           typeahead-select-on-exact="true"
                           uib-typeahead="pax for pax in ['1','2','3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20']"
                           typeahead-min-length="0"
                           placeholder="Pax">
                  </span>
                  <span class="search-form">
                    <div class="dropdown datetimepicker-holder search-textfield date-textfield">
                      <a role="button" data-toggle="dropdown" ng-class="ctrl.formatTime(search_activity.start_at) != 'Click to choose time' ? 'black-color' : ''" data-target="#" href="Javascript:void(0)"><i class="fa fa-calendar white-color"></i> {{ctrl.formatTime(search_activity.start_at)}}</a>
                      <ul class="dropdown-menu" role="menu">
                        <datetimepicker
                        data-on-set-time="ctrl.onSetTime(newDate, oldDate, $index)"
                        data-before-render="ctrl.beforeRenderDate($view, $dates, $leftDate, $upDate, $rightDate, $index)"
                        datetimepicker-config="{ dropdownSelector: '.fa-calendar' }"
                        ng-model="search_activity.start_at"></datetimepicker>
                      </ul>
                    </div>
                  </span>
                  <a href="javascript:void(0)" class="cross-icon" ng-show="$index > 0" ng-click="ctrl.removeActivity($index)">
                    <i class="fa fa-times" aria-hidden="true"></i>
                  </a>
                  <br/> <br/>
                </span>
                <a class="modify-btn" ng-click="ctrl.create()" href="">Search</a>
                <div class="clearfix"></div>
              </div>
              <div>
                <a class="modify-btn" href=""  ng-click="ctrl.addActivity()"><i class="fa fa-plus" aria-hidden="true"></i> Add Trip</a>
                <a class="modify-btn" href="" ng-show="ctrl.search_activities.length <= 1" ng-click="ctrl.addRoundTrip()"><i class="fa fa-plus" aria-hidden="true"></i> Round Trip</a>
                <a href="#" class="modify-btn" ng-click="ctrl.disable_=!ctrl.disable_">Cancel</a>
              </div>

            </div>
          </div>
        </div>
        <!-- search con finish -->

        <div ng-show="ctrl.disable_">
          <div class="row">
            <span class="search-edit-form">
              <div class="col-xs-12 search-main-container">
                <div class="search-con">
                <span class="search-main-form autocomplete-height" ng-repeat="search_activity in ctrl.search_activities">
                  <span class="search-form">
                    <span class="search-icon departure-icon"></span>
                    <input class="search-textfield" title="Departure Airport"
                           disabled
                           placeholder="Departure"
                           autocomplete="off"
                           typeahead-editable="false"
                           typeahead-select-on-exact="true"
                           typeahead-template-url="airportsTypeAhead.html"
                           ng-model="search_activity.departure_airport"
                           uib-typeahead="airport as airport.label for airport in ctrl.airports | filter:{label:$viewValue}"
                           type="text"
                           typeahead-min-length="0">
                  </span>
                  <span class="search-form">
                    <span class="search-icon arrival-icon"></span>
                    <input class="search-textfield" title="Arrival Airport"
                           disabled
                           placeholder="Arrival"
                           autocomplete="off"
                           typeahead-editable="false"
                           typeahead-select-on-exact="true"
                           typeahead-template-url="airportsTypeAhead.html"
                           ng-model="search_activity.arrival_airport"
                           uib-typeahead="airport as airport.label for airport in ctrl.airports | filter:{label:$viewValue}"
                           type="text"
                           typeahead-min-length="0">
                  </span>
                  <span class="search-form">
                    <span class="search-icon pax-icon"></span>
                    <input class="search-textfield pax-textfield" type="text"
                           disabled
                           ng-model="search_activity.pax"
                           autocomplete="off"
                           typeahead-editable="false"
                           typeahead-select-on-exact="true"
                           uib-typeahead="pax for pax in ['1','2','3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20']"
                           typeahead-min-length="0"
                           placeholder="Pax">
                  </span>
                  <span class="search-form">
                    <i class="fa fa-calendar celender-icon white-color"></i>
                    <input type="text" class="search-textbox" ng-value="ctrl.formatTime(search_activity.start_at)" ng-disabled="ctrl.disable_">
                  </span>

                  <br/> <br/>
                </span>
                  <a href="#" class="modify-btn" ng-click="ctrl.disable_=!ctrl.disable_">Modify</a>
                  <div class="clearfix"></div>
                </div>
              </div>
            </span>
          </div>
        </div>

        <div class="shadow-con text-center">
          <img src="http://d3tfanr7troppj.cloudfront.net/static_files/images/000/000/321/original/line.png?1467267297" class="img-responsive" alt="seprator">
        </div>
        <div class="filter-con">
          <div class="row">
            <div class="col-sm-4 col-xs-12">
              <div class="filter seating-capacity">
                <h3>Seating Capacity</h3>
                <script type="text/javascript">
//                    $('#ex1').slider({
//                        formatter: function(value) {
//                            return 'Current value: ' + value;
//                        }
//                    });
//                    $('#ex2').slider({
//                        formatter: function(value) {
//                            return 'Current value: ' + value;
//                        }
//                    });
                    // With JQuery
                    $("#ex1").slider({});
                    $("#ex2").slider({});

                </script>
                <!--<input id="ex1" ng-init="filterSeatingCapacity = 0" ng-model="filterSeatingCapacity" data-slider-id='ex1Slider' type="text" data-slider-min="0" data-slider-max="35" data-slider-step="1" data-slider-value="0"/>-->
                <!--<img src="http://d3tfanr7troppj.cloudfront.net/static_files/images/000/000/322/original/price_bar.png?1467267312" class="img-responsive" alt="">-->

                 <b> 0 &nbsp;&nbsp;</b> <input id="ex1" type="text"  ng-model="ctrl.filterSeatingCapacity" class="span2" data-slider-min="0" data-slider-max="35" data-slider-step="1" data-slider-value="[0,35]"/> <b> &nbsp;&nbsp; 35 </b>
                {{ctrl.filterSeatingCapacity.split(',')}}
              </div>
              <div class="filter flying-time">
                <h3>Flying Time</h3>
                <!--<input id="ex2"  data-slider-id='ex2Slider' type="text" data-slider-min="0.5" data-slider-max="6.0" data-slider-value="0"/>-->
                <b> 1 Hrs &nbsp;&nbsp;</b> <input id="ex2" type="text" ng-model="" class="span2" value="" data-slider-min="1" data-slider-max="6" data-slider-step="1" data-slider-value="[0,6]"/> <b> &nbsp;&nbsp; 6 Hrs </b>
              </div>
              {{abc}}
            </div>
            <div class="col-sm-8 col-xs-12">
              <div class="filter aircraft_type">
                <h3>Aircraft Type</h3>
                <ul class="">
                  <li> <input type="checkbox" data-ng-model="c_filter1" data-ng-true-value="'Twin Engine Turboprop'" data-ng-false-value=""> Twin Engine Turboprop</li>
                  <li><input type="checkbox" data-ng-model="c_filter2" data-ng-true-value="'Large Business Jet'" data-ng-false-value=""> Large Business Jet</li>
                  <li><input type="checkbox" data-ng-model="c_filter3" data-ng-true-value="'Light Jet'" data-ng-false-value=""> Light Jet</li>
                  <li><input type="checkbox" data-ng-model="c_filter4" data-ng-true-value="'Midsize Jet'" data-ng-false-value=""> Midsize Jet</li>
                  <li><input type="checkbox" data-ng-model="c_filter5" data-ng-true-value="'Single Engine Turboprop'" data-ng-false-value=""> Single Engine Turbo</li>
                  <li><input type="checkbox" data-ng-model="c_filter6" data-ng-true-value="'Airliner'" data-ng-false-value=""> Airliner</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="search_result_main">
    <div class="container">
      <div class="search_result">
        <h2>Search Result</h2>
        <!--<div class="" ng-repeat="result in ctrl.results | orderBy : 'totalCost' | filter:c_filter1 | filter: c_filter2 | filter:c_filter3 | filter:c_filter4 | filter: c_filter5 " ng-if="result.aircraft.seating_capacity > filterSeatingCapacity || result.aircraft.seating_capacity == filterSeatingCapacity ">-->
        <div class="" ng-repeat="result in ctrl.results | orderBy : 'totalCost' | filter:c_filter1 | filter: c_filter2 | filter:c_filter3 | filter:c_filter4 | filter: c_filter5 " ng-if="result.aircraft.seating_capacity > ctrl.filterSeatingCapacity.split(',')[0] && result.aircraft.seating_capacity < ctrl.filterSeatingCapacity.split(',')[1]">
          {{result}}
          <div class="result-search">
            <div class="col-md-8 col-sm-7 col-xs-12 search_img">
              <div class="img-hide">
                <img src="http://d3tfanr7troppj.cloudfront.net/static_files/images/000/000/325/original/Untitled-1.png?1467356517" alt="">
              </div>
              <div class="icon-con">
                <img src="http://d3tfanr7troppj.cloudfront.net/static_files/images/000/000/329/original/crew.png?1468315756" data-toggle="tooltip" title="City" alt="">
                <img src="http://d3tfanr7troppj.cloudfront.net/static_files/images/000/000/336/original/height-1.png?1468389478" data-toggle="tooltip" title="Height" alt="">
                <img src="http://d3tfanr7troppj.cloudfront.net/static_files/images/000/000/332/original/seats.png?1468315794" data-toggle="tooltip" title="Seats" alt="">
                <img src="http://d3tfanr7troppj.cloudfront.net/static_files/images/000/000/334/original/wifi.png?1468315820" data-toggle="tooltip" title="Wifi" alt="">
                <img src="http://d3tfanr7troppj.cloudfront.net/static_files/images/000/000/328/original/baggage.png?1468315730" data-toggle="tooltip" title="Baggage" alt="">
                <img src="http://d3tfanr7troppj.cloudfront.net/static_files/images/000/000/331/original/phone.png?1468315780" data-toggle="tooltip" title="Phone" alt="">
                <img src="http://d3tfanr7troppj.cloudfront.net/static_files/images/000/000/335/original/speed-1.png?1468389449" data-toggle="tooltip" title="Speed" alt="">
                <script>
                    $(document).ready(function(){
                        $('[data-toggle="tooltip"]').tooltip();
                    });
                </script>
              </div>
            </div>
            <div class="col-md-4 col-sm-5 col-xs-12 search-ryt-con">
              <div class="img-bg">
                <h3>{{result.aircraft.aircraft_type.name}}</h3>
                <h5>{{result.aircraft.aircraft_category.name}}</h5>
                <h4>Estimated Price ₹ {{ctrl.totalTripCost(result) | currency:"":0 | indianCurrency}}</h4>
              </div>
              <div class="detail-link-con">
                <a href="#" ng-click="custom =! custom; ctrl.calculateCost(result)">Details</a> | <a href="javascript:void(0)" ng-hide="result.enquired" ng-click="ctrl.enquire(result)">Enquire</a>
              </div>
            </div>
            <div class="clearfix"></div>
          </div>
          <div class="empty-leg-toogle-main" ng-show="custom">
            <div class="arrow-up"></div>
            <div class="top-destination-con">
              <div class="col-xs-12 text-right">
                <img style="cursor: pointer" width="110" ng-click="custom3 =! custom3" src="http://d3tfanr7troppj.cloudfront.net/static_files/images/000/000/326/original/icon.png?1467374235" alt="">
              </div>
              <div ng-repeat="flight_plan in result.flight_plan" ng-hide="flight_plan.flight_type == 'empty_leg' && !custom3">
                <div class="destination-con col-sm-offset-2 col-sm-3 col-xs-6">
                  <p>
                    <img width="45" class="img-responsive" src="http://d3tfanr7troppj.cloudfront.net/static_files/images/000/000/309/original/departure.png?1466494177" alt="">
                  </p>
                  <p class="city-name">{{ctrl.airportForId(flight_plan.departure_airport_id).name}}</p>
                  <p class="time-con">{{ctrl.formatTime(flight_plan.start_at).split(',')[1]}}</p>
                  <p class="date-con">{{ctrl.formatTime(flight_plan.start_at).split(',')[0]}}</p>
                </div>
                <div class="destination-con col-sm-3 col-xs-6">
                  <p>
                    <img width="45" class="img-responsive" src="http://d3tfanr7troppj.cloudfront.net/static_files/images/000/000/307/original/arrival.png?1466494148" alt="">
                  </p>
                  <p class="city-name">{{ctrl.airportForId(flight_plan.arrival_airport_id).name}}</p>
                  <p class="time-con">{{ctrl.formatTime(flight_plan.end_at).split(',')[1]}}</p>
                  <p class="date-con">{{ctrl.formatTime(flight_plan.end_at).split(',')[0]}}</p>
                </div>
                <div class="destination-con col-sm-2 hidden-xs">
                  <p>
                    <img width="35" class="img-responsive" src="http://d3tfanr7troppj.cloudfront.net/static_files/images/000/000/305/original/time.png?1466424527" alt="">
                  </p>
                  <p class="time-duration">{{(flight_plan.flight_time).split(':')[0]}} Hrs {{(flight_plan.flight_time).split(':')[1]}} Mins</p>
                </div>
                <div class="clearfix"></div>
              </div>
              <div class="img-total-cost-con">
                <div class="col-md-4 col-sm-6">
                  <div class="aircraft-img">
                    <img src="http://d3tfanr7troppj.cloudfront.net/static_files/images/000/000/325/original/Untitled-1.png?1467356517" alt="">
                  </div>
                </div>
                <div class="col-md-8 col-sm-6">
                  <div class="flight-cost-con">
                    <h2>Cost Details</h2>
                    <div ng-repeat="flight_plan in result.flight_plan | filter : { flight_type: 'user_search' }">
                      <div class="cost-con">
                        <div class="row">
                          <div class="col-xs-5">
                            <p style="font-weight: bold">{{ctrl.airportForId(flight_plan.departure_airport_id).name}}</p>
                          </div>
                          <div class="col-sm-2 hidden-xs text-center">
                            <p style="font-weight: bold">>></p>
                          </div>
                          <div class="col-xs-5 text-right">
                            <p style="font-weight: bold">{{ctrl.airportForId(flight_plan.arrival_airport_id).name}}</p>
                          </div>
                        </div>
                      </div>
                      <div class="cost-con">
                        <div class="row">
                          <div class="col-xs-7">
                            <p>Flight Time</p>
                          </div>
                          <div class="col-xs-5 text-right">
                            <p>{{flight_plan.flight_time}}</p>
                          </div>
                        </div>
                      </div>
                      <div class="cost-con">
                        <div class="row">
                          <div class="col-xs-7">
                            <p>Flying Charges</p>
                          </div>
                          <div class="col-xs-5 text-right">
                            <p>₹ {{flight_plan.flight_cost | currency:"":0 | indianCurrency }}</p>
                          </div>
                        </div>
                      </div>
                      <div class="cost-con">
                        <div class="row">
                          <div class="col-xs-7">
                            <p>Handling Charges</p>
                          </div>
                          <div class="col-xs-5 text-right">
                            <p>₹ {{flight_plan.handling_cost_at_takeoff | currency:"":0 | indianCurrency}}</p>
                          </div>
                        </div>
                      </div>
                      <div class="cost-con">
                        <div class="row">
                          <div class="col-xs-7">
                            <p>Landing Charges</p>
                          </div>
                          <div class="col-xs-5">
                            <p class="text-right">₹ {{flight_plan.landing_cost_at_arrival | currency:"":0 | indianCurrency}}</p>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div ng-show="custom3">
                      <div class="cost-con">
                        <div class="row">
                          <div class="col-xs-12">
                            <h4>Empty Leg</h4>
                          </div>
                        </div>
                      </div>
                      <div ng-repeat="flight_plan in result.flight_plan | filter : { flight_type: 'empty_leg' }">
                        <div class="cost-con">
                          <div class="row">
                            <div class="col-xs-5">
                              <p style="font-weight: bold">{{ctrl.airportForId(flight_plan.departure_airport_id).name}}</p>
                            </div>
                            <div class="col-sm-2 hidden-xs text-center">
                              <p style="font-weight: bold">>></p>
                            </div>
                            <div class="col-xs-5 text-right">
                              <p style="font-weight: bold">{{ctrl.airportForId(flight_plan.arrival_airport_id).name}}</p>
                            </div>
                          </div>
                        </div>
                        <div class="cost-con">
                          <div class="row">
                            <div class="col-xs-7">
                              <p>Flight Time</p>
                            </div>
                            <div class="col-xs-5 text-right">
                              <p>{{flight_plan.flight_time}}</p>
                            </div>
                          </div>
                        </div>
                        <div class="cost-con">
                          <div class="row">
                            <div class="col-xs-7">
                              <p>Flying Charges</p>
                            </div>
                            <div class="col-xs-5 text-right">
                              <p>₹ {{flight_plan.flight_cost | currency:"":0 | indianCurrency }}</p>
                            </div>
                          </div>
                        </div>
                        <div class="cost-con">
                          <div class="row">
                            <div class="col-xs-7">
                              <p>Handling Charges</p>
                            </div>
                            <div class="col-xs-5 text-right">
                              <p>₹ {{flight_plan.handling_cost_at_takeoff | currency:"":0 | indianCurrency}}</p>
                            </div>
                          </div>
                        </div>
                        <div class="cost-con">
                          <div class="row">
                            <div class="col-xs-7">
                              <p>Landing Charges</p>
                            </div>
                            <div class="col-xs-5">
                              <p class="text-right">₹ {{flight_plan.landing_cost_at_arrival | currency:"":0 | indianCurrency}}</p>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div class="cost-con">
                      <div class="row">
                        <div class="col-xs-12">
                          <h4>Sub Total</h4>
                        </div>
                      </div>
                    </div>
                    <div class="cost-con" ng-repeat="tax in ctrl.taxBreakup">
                      <div class="row">
                        <div class="col-xs-7">
                          <p>{{tax.name}}({{tax.value}}%)</p>
                        </div>
                        <div class="col-xs-5">
                          <p class="text-right">₹ {{tax.amount | currency:"":2 | indianCurrency}}</p>
                        </div>
                      </div>
                    </div>
                    <div class="cost-con">
                      <div class="row">
                        <div class="col-xs-7">
                          <h5>Grand Total</h5>
                        </div>
                        <div class="col-xs-5">
                          <h5 class="text-right">₹ {{ctrl.grandTotal | currency:"":0 | indianCurrency}}</h5>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="clearfix"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!--========================================================================================-->
  <!--========================================================================================-->
  <!--========================================================================================-->


  <!--<div class="container search-container">-->
  <!--<div class="res-toogle-main hidden-lg hidden-md hidden-sm">-->
  <!--<div class="col-xs-6 text-right">-->
  <!--<a href="javascript:void(0)" ng-click="ctrl.active_xs_search_bar =! ctrl.active_xs_search_bar" ng-class="{'active' : !ctrl.active_xs_search_bar}">Trip</a>-->
  <!--</div>-->
  <!--<div class="col-xs-6">-->
  <!--<a href="javascript:void(0)" ng-click="ctrl.active_xs_search_bar =! ctrl.active_xs_search_bar" ng-class="{'active' : ctrl.active_xs_search_bar}">Refine Your Search</a>-->
  <!--</div>-->
  <!--<div class="clearfix"></div>-->
  <!--</div>-->
  <!--<div class="col-sm-12 top-space"  ng-class="{'hidden-xs' : !ctrl.active_xs_search_bar == false}">-->
  <!--<div class="modify-search-con" ng-repeat="search_activity in ctrl.search_activities">-->
  <!--<div class="row">-->
  <!--<div class="col-md-4 col-sm-6 col-xs-12 city-con">-->
  <!--<h6 class="small-heading">-->
  <!--{{ctrl.search_activities.length == 1 ? 'one way' : ''}}-->
  <!--{{ctrl.search_activities.length == 2 && ctrl.search_activities[0].departure_airport_id == ctrl.search_activities[1].arrival_airport_id ? 'round trip' : ''}}-->
  <!--{{ctrl.search_activities.length == 2 && ctrl.search_activities[0].departure_airport_id != ctrl.search_activities[1].arrival_airport_id ? 'two way' : ''}}-->
  <!--{{ctrl.search_activities.length > 2 ? 'multiple trips' : ''}}-->
  <!--</h6>-->
  <!--<h4 class="city-name">{{ctrl.airportForId(search_activity.departure_airport_id).city.name}} -&#45;&#45; {{ctrl.airportForId(search_activity.arrival_airport_id).city.name}}</h4>-->
  <!--</div>-->
  <!--<div class="col-lg-4 col-md-5 col-sm-6 col-xs-12 departure-return-con">-->
  <!--<div class="departure-con">-->
  <!--<h6 class="small-heading">date</h6>-->
  <!--<span class="date-con">-->
  <!--<i class="fa fa-calendar"></i> {{ctrl.formatTime(search_activity.start_at)}}-->
  <!--</span>-->
  <!--</div>-->
  <!--</div>-->
  <!--<div class="col-lg-1 col-md-1 col-sm-6 col-xs-4 pax-con">-->
  <!--<h6 class="small-heading">Pax</h6>-->
  <!--<h4 class="Pax-text">{{search_activity.pax}}</h4>-->
  <!--</div>-->
  <!--<div class="col-md-3 col-sm-6 col-xs-8 modify-btn-con text-right">-->
  <!--<a href="/tmp_url?search_id={{ctrl.searchId}}">+ Modify Search</a>-->
  <!--</div>-->
  <!--</div>-->
  <!--</div>-->
  <!--</div>-->
  <!--<div class="col-xs-12">-->
  <!--<div class="row">-->
  <!--<div class="col-md-4 col-sm-4 left-filter"  ng-class="{'hidden-xs' : ctrl.active_xs_search_bar == false}">-->
  <!--<h2>+ Refine Your Search</h2>-->
  <!--<div class="aircraft-type-con">-->
  <!--<h3>Aircraft Type</h3>-->
  <!--<ul>-->
  <!--<li><input type="checkbox" /> Midsize Jet</li>-->
  <!--<li><input type="checkbox" /> Light Jet</li>-->
  <!--<li><input type="checkbox" /> Large Business Jet</li>-->
  <!--<li><input type="checkbox" /> Single Engine Turboprop</li>-->
  <!--<li><input type="checkbox" /> Twin Engine Turboprop</li>-->
  <!--</ul>-->
  <!--</div>-->
  <!--</div>-->
  <!--<div class="col-md-8 col-sm-8 right-search-images">-->
  <!--<div class="result-main-con">-->
  <!--<div class="result-heading">-->
  <!--<div class="col-xs-8">-->
  <!--<h2>Search Result</h2>-->
  <!--</div>-->
  <!--<div class="clearfix"></div>-->
  <!--</div>-->
  <!--</div>-->
  <!--<div class="list-main" ng-repeat="result in ctrl.results | orderBy : 'totalCost'">-->
  <!--<div class="list-con" ng-click="custom =! custom">-->
  <!--<img src="http://d3tfanr7troppj.cloudfront.net/static_files/images/000/000/298/original/2-780x320.jpg?1466073908" alt="">-->
  <!--<div class="aircraft-name-con">-->
  <!--<div class="name-con pull-right">-->
  <!--<h3>{{result.aircraft.aircraft_type.name}}</h3>-->
  <!--<span class="aircraft-type">Single Engine Turboprop</span>-->
  <!--</div>-->
  <!--<div class="clearfix"></div>-->
  <!--</div>-->
  <!--<div class="estimate-price-con">-->
  <!--<p class="price-con pull-right">Estimated Price ₹ {{ctrl.totalTripCost(result) | currency:"":0 | indianCurrency}}</p>-->
  <!--<div class="clearfix"></div>-->
  <!--</div>-->
  <!--<div class="bottom-strip-con">-->
  <!--<div class="col-sm-8 col-xs-8">-->
  <!--<ul>-->
  <!--<li><img src="http://d3tfanr7troppj.cloudfront.net/static_files/images/000/000/316/original/baggage.png?1466582622" alt=""></li>-->
  <!--<li><img src="http://d3tfanr7troppj.cloudfront.net/static_files/images/000/000/318/original/speedometer.png?1466582662" alt=""></li>-->
  <!--<li><img src="http://d3tfanr7troppj.cloudfront.net/static_files/images/000/000/320/original/seat2.png?1466582808" alt=""></li>-->
  <!--<div class="clearfix"></div>-->
  <!--</ul>-->

  <!--</div>-->
  <!--<div class="col-sm-4 col-xs-4 text-right">-->
  <!--<a href="" ng-click="ctrl.enquire(result)">Enquire</a>-->
  <!--</div>-->
  <!--</div>-->
  <!--</div>-->

  <!--<div class="search-detail-main" ng-show="custom">-->
  <!--<div class="row" ng-init="show=0">-->
  <!--<div class="col-xs-12 top-heading">-->
  <!--<div class="heading-bg">-->
  <!--<div class="arrow-top">-->
  <!--&lt;!&ndash;<img class="triengle-icon" src="http://d3tfanr7troppj.cloudfront.net/static_files/images/000/000/315/original/triangle.png?1466574062" alt="">&ndash;&gt;-->
  <!--<div class="arrow-up"></div>-->
  <!--</div>-->
  <!--<div class="col-sm-7 col-xs-12">-->
  <!--<h4>{{result.aircraft.aircraft_type.name}}</h4>-->
  <!--</div>-->
  <!--<div class="col-sm-5 col-xs-12">-->
  <!--<p class="cost-text">Cost per hour : <i class="fa fa-inr" aria-hidden="true"></i>{{result.aircraft.per_hour_cost}}</p>-->
  <!--</div>-->
  <!--<div class="clearfix"></div>-->
  <!--</div>-->
  <!--</div>-->
  <!--<div class="col-sm-3 col-xs-12 left-tabs">-->
  <!--<ul>-->
  <!--<li><a ng-click="show=0" ng-class="{'active':show==0}" href="javascript:void(0)">Your Search <i class="fa fa-arrow-right arrow-color" aria-hidden="true"></i></a></li>-->
  <!--<li><a ng-click="show=1" ng-class="{'active':show==1}" href="javascript:void(0)">Empty Legs <i class="fa fa-arrow-right arrow-color" aria-hidden="true"></i></a></li>-->
  <!--<div class="clearfix"></div>-->
  <!--</ul>-->
  <!--</div>-->
  <!--<div class="col-sm-9 col-xs-12 right-tabs-content">-->
  <!--<div class="tabs-bg">-->
  <!--<div class="tab-content-main" ng-show="show==0">-->
  <!--<div ng-repeat="flight_plan in result.flight_plan | filter: { flight_type:'user_search' }">-->
  <!--<div class="top-destination-con">-->
  <!--<div class="row">-->
  <!--<div class="col-sm-4 col-xs-6">-->
  <!--<p>-->
  <!--<img width="45" class="img-responsive" src="http://d3tfanr7troppj.cloudfront.net/static_files/images/000/000/309/original/departure.png?1466494177" alt="">-->
  <!--</p>-->
  <!--<p class="city-name">{{ctrl.airportForId(flight_plan.departure_airport_id).name}}</p>-->
  <!--<p class="time-con">{{ctrl.formatTime(flight_plan.start_at).split(',')[1]}}</p>-->
  <!--<p class="date-con">{{ctrl.formatTime(flight_plan.start_at).split(',')[0]}}</p>-->
  <!--</div>-->
  <!--<div class="col-sm-4 hidden-xs">-->
  <!--<p>-->
  <!--<img width="35" class="img-responsive" src="http://d3tfanr7troppj.cloudfront.net/static_files/images/000/000/305/original/time.png?1466424527" alt="">-->
  <!--</p>-->
  <!--<p class="time-duration">{{flight_plan.flight_time}}</p>-->
  <!--</div>-->
  <!--<div class="col-sm-4 col-xs-6">-->
  <!--<p>-->
  <!--<img width="45" class="img-responsive" src="http://d3tfanr7troppj.cloudfront.net/static_files/images/000/000/307/original/arrival.png?1466494148" alt="">-->
  <!--</p>-->
  <!--<p class="city-name">{{ctrl.airportForId(flight_plan.arrival_airport_id).name}}</p>-->
  <!--<p class="time-con">{{ctrl.formatTime(flight_plan.end_at).split(',')[1]}}</p>-->
  <!--<p class="date-con">{{ctrl.formatTime(flight_plan.end_at).split(',')[0]}}</p>-->
  <!--</div>-->
  <!--</div>-->
  <!--</div>-->
  <!--<div class="charges-main-con">-->
  <!--<div class="col-sm-8 col-xs-7">-->
  <!--<h3>Flying Charges</h3>-->
  <!--</div>-->
  <!--<div class="col-sm-4 col-xs-5 text-right">-->
  <!--<h3><i class="fa fa-inr" aria-hidden="true"></i> {{flight_plan.flight_cost | currency:"":0 | indianCurrency}}</h3>-->
  <!--</div>-->
  <!--<div class="col-sm-8 col-xs-7">-->
  <!--<h3>Handling Charges</h3>-->
  <!--</div>-->
  <!--<div class="col-sm-4 col-xs-5 text-right">-->
  <!--<h3><i class="fa fa-inr" aria-hidden="true"></i> {{flight_plan.handling_cost_at_takeoff | currency:"":0 | indianCurrency}}</h3>-->
  <!--</div>-->
  <!--<div class="col-sm-8 col-xs-7">-->
  <!--<h3>Landing Charges</h3>-->
  <!--</div>-->
  <!--<div class="col-sm-4 col-xs-5 text-right">-->
  <!--<h3><i class="fa fa-inr" aria-hidden="true"></i> {{flight_plan.landing_cost_at_arrival | currency:"":0 | indianCurrency}}</h3>-->
  <!--</div>-->
  <!--<div class="clearfix"></div>-->
  <!--</div>-->
  <!--</div>-->
  <!--</div>-->
  <!--<div class="tab-content-main" ng-show="show==1">-->
  <!--<div ng-repeat="flight_plan in result.flight_plan | filter: {flight_type: 'empty_leg'}">-->
  <!--<div class="top-destination-con">-->
  <!--<div class="col-sm-4 col-xs-6">-->
  <!--<p>-->
  <!--<img width="45" class="img-responsive" src="http://d3tfanr7troppj.cloudfront.net/static_files/images/000/000/309/original/departure.png?1466494177" alt="">-->
  <!--</p>-->
  <!--<p class="city-name">{{ctrl.airportForId(flight_plan.departure_airport_id).name}}</p>-->
  <!--<p class="time-con">{{ctrl.formatTime(flight_plan.start_at).split(',')[1]}}</p>-->
  <!--<p class="date-con">{{ctrl.formatTime(flight_plan.start_at).split(',')[0]}}</p>-->
  <!--</div>-->
  <!--<div class="col-sm-4 hidden-xs">-->
  <!--<p>-->
  <!--<img width="35" class="img-responsive" src="http://d3tfanr7troppj.cloudfront.net/static_files/images/000/000/305/original/time.png?1466424527" alt="">-->
  <!--</p>-->
  <!--<p class="time-duration">{{flight_plan.flight_time}}</p>-->
  <!--</div>-->
  <!--<div class="col-sm-4 col-xs-6">-->
  <!--<p>-->
  <!--<img width="45" class="img-responsive" src="http://d3tfanr7troppj.cloudfront.net/static_files/images/000/000/307/original/arrival.png?1466494148" alt="">-->
  <!--</p>-->
  <!--<p class="city-name">{{ctrl.airportForId(flight_plan.arrival_airport_id).name}}</p>-->
  <!--<p class="time-con">{{ctrl.formatTime(flight_plan.end_at).split(',')[1]}}</p>-->
  <!--<p class="date-con">{{ctrl.formatTime(flight_plan.end_at).split(',')[0]}}</p>-->
  <!--</div>-->
  <!--<div class="clearfix"></div>-->
  <!--</div>-->
  <!--<div class="charges-main-con">-->
  <!--<div class="col-xs-8">-->
  <!--<h3>Flying Charges</h3>-->
  <!--</div>-->
  <!--<div class="col-xs-4 text-right">-->
  <!--<h3><i class="fa fa-inr" aria-hidden="true"></i> {{flight_plan.flight_cost | currency:"":0 | indianCurrency}}</h3>-->
  <!--</div>-->
  <!--<div class="col-xs-8">-->
  <!--<h3>Handling Charges</h3>-->
  <!--</div>-->
  <!--<div class="col-xs-4 text-right">-->
  <!--<h3><i class="fa fa-inr" aria-hidden="true"></i> {{flight_plan.handling_cost_at_takeoff | currency:"":0 | indianCurrency}}</h3>-->
  <!--</div>-->
  <!--<div class="col-xs-8">-->
  <!--<h3>Landing Charges</h3>-->
  <!--</div>-->
  <!--<div class="col-xs-4 text-right">-->
  <!--<h3><i class="fa fa-inr" aria-hidden="true"></i> {{flight_plan.landing_cost_at_arrival | currency:"":0 | indianCurrency}}</h3>-->
  <!--</div>-->
  <!--<div class="clearfix"></div>-->
  <!--</div>-->
  <!--</div>-->
  <!--</div>-->
  <!--<div class="total-main-con light-border">-->
  <!--<div class="col-sm-8 col-xs-7">-->
  <!--<h3>TOTAL</h3>-->
  <!--</div>-->
  <!--<div class="col-sm-4 col-xs-5 text-right">-->
  <!--<h3><i class="fa fa-inr" aria-hidden="true"></i> 8,25,000</h3>-->
  <!--</div>-->
  <!--<div class="col-sm-8 col-xs-7">-->
  <!--<h3>Taxes & Administrative Charges</h3>-->
  <!--</div>-->
  <!--<div class="col-sm-4 col-xs-5 text-right">-->
  <!--<h3>{{flight_plan.handling_cost_at_takeoff}}</h3>-->
  <!--</div>-->
  <!--<div class="clearfix"></div>-->
  <!--</div>-->
  <!--<div class="total-main-con">-->
  <!--<div class="col-sm-8 col-xs-7">-->
  <!--<h2>GRAND TOTAL</h2>-->
  <!--</div>-->
  <!--<div class="col-sm-4 col-xs-5 text-right">-->
  <!--<h2><i class="fa fa-inr" aria-hidden="true"></i> 8,25,000</h2>-->
  <!--</div>-->
  <!--<div class="clearfix"></div>-->
  <!--</div>-->
  <!--</div>-->
  <!--</div>-->
  <!--</div>-->
  <!--</div>-->
  <!--</div>-->
  <!--</div>-->
  <!--&lt;!&ndash;========================================================================================&ndash;&gt;-->
  <!--&lt;!&ndash;========================================================================================&ndash;&gt;-->
  <!--&lt;!&ndash;========================================================================================&ndash;&gt;-->
  <!--&lt;!&ndash;<div class="col-sm-12 search-main-con">&ndash;&gt;-->
  <!--&lt;!&ndash;<div class="row">&ndash;&gt;-->
  <!--&lt;!&ndash;<div class="col-sm-8">&ndash;&gt;-->
  <!--&lt;!&ndash;<span class="heading popup-heading tmp-after_" style="font-size: 45px; font-family: arial, sans-serif; color: #000000;">Choose Your Jet</span>&ndash;&gt;-->
  <!--&lt;!&ndash;</div>&ndash;&gt;-->
  <!--&lt;!&ndash;<div class="col-sm-4">&ndash;&gt;-->
  <!--&lt;!&ndash;<a class="search-btn pull-right" style="color: black; border: 2px solid black;padding: 10px 20px;margin-top: 15px;" href="/tmp_url?search_id={{ctrl.searchId}}">Modify Search</a>&ndash;&gt;-->
  <!--&lt;!&ndash;</div>&ndash;&gt;-->
  <!--&lt;!&ndash;</div>&ndash;&gt;-->
  <!--&lt;!&ndash;</div>&ndash;&gt;-->
  <!--&lt;!&ndash;<div class="col-xs-12 search-input-box" style="border: none">&ndash;&gt;-->
  <!--&lt;!&ndash;<div class="row" >&ndash;&gt;-->
  <!--&lt;!&ndash;&lt;!&ndash;<div class="col-md-10 col-sm-10 col-xs-12 modify-textfield-con" ng-repeat="search_activity in ctrl.search_activities">&ndash;&gt;&ndash;&gt;-->
  <!--&lt;!&ndash;<div class="col-xs-12 modify-textfield-con" ng-repeat="search_activity in ctrl.search_activities">&ndash;&gt;-->
  <!--&lt;!&ndash;<div class="row">&ndash;&gt;-->
  <!--&lt;!&ndash;<div class="col-md-3 col-sm-6 col-xs-12 c_disable">&ndash;&gt;-->
  <!--&lt;!&ndash;<small ng-show="$index == 0" style="font-size: 70%">Departure</small>&ndash;&gt;-->
  <!--&lt;!&ndash;<input class="form-control search-input" style="border: 1px solid #000000;" ng-model="ctrl.airportForId(search_activity.departure_airport_id).name" type="text" id="departure_airport" placeholder="Departure Airport">&ndash;&gt;-->
  <!--&lt;!&ndash;</div>&ndash;&gt;-->
  <!--&lt;!&ndash;<div class="col-md-3 col-sm-6 col-xs-12 c_disable">&ndash;&gt;-->
  <!--&lt;!&ndash;<small ng-show="$index == 0" style="font-size: 70%">Arrival</small>&ndash;&gt;-->
  <!--&lt;!&ndash;<input class="form-control search-input" style="border: 1px solid #000000;" ng-model="ctrl.airportForId(search_activity.arrival_airport_id).name" type="text" id="arrival_airport" placeholder="Arrival Airport">&ndash;&gt;-->
  <!--&lt;!&ndash;</div>&ndash;&gt;-->
  <!--&lt;!&ndash;<div class="col-md-2 col-sm-6 col-xs-12 c_disable">&ndash;&gt;-->
  <!--&lt;!&ndash;<small ng-show="$index == 0" style="font-size: 70%">Pax</small>&ndash;&gt;-->
  <!--&lt;!&ndash;<input class="form-control search-input" style="border: 1px solid #000000;" ng-model="search_activity.pax" type="text" id="pax" placeholder="Pax">&ndash;&gt;-->
  <!--&lt;!&ndash;</div>&ndash;&gt;-->
  <!--&lt;!&ndash;<div class="col-md-4 col-sm-6 col-xs-12 textfield-border c_disable" >&ndash;&gt;-->
  <!--&lt;!&ndash;<small ng-show="$index == 0" style="font-size: 70%">Time</small>&ndash;&gt;-->
  <!--&lt;!&ndash;<div class="form-control search-input custom-calander dropdown datetimepicker-holder" style="border: 1px solid #000000;">&ndash;&gt;-->
  <!--&lt;!&ndash;<a role="button" data-toggle="dropdown" data-target="#" href="Javascript:void(0)" style="color: #000000"><i class="fa fa-calendar"></i> {{ctrl.formatTime(search_activity.start_at)}}</a>&ndash;&gt;-->
  <!--&lt;!&ndash;<ul class="dropdown-menu" role="menu">&ndash;&gt;-->
  <!--&lt;!&ndash;<datetimepicker&ndash;&gt;-->
  <!--&lt;!&ndash;data-on-set-time="ctrl.onSetTime(newDate, oldDate, $index)"&ndash;&gt;-->
  <!--&lt;!&ndash;data-before-render="ctrl.beforeRenderDate($view, $dates, $leftDate, $upDate, $rightDate, $index)"&ndash;&gt;-->
  <!--&lt;!&ndash;datetimepicker-config="{ dropdownSelector: '.fa-calendar' }"&ndash;&gt;-->
  <!--&lt;!&ndash;ng-model="activity.start_at">&ndash;&gt;-->
  <!--&lt;!&ndash;</datetimepicker>&ndash;&gt;-->
  <!--&lt;!&ndash;</ul>&ndash;&gt;-->
  <!--&lt;!&ndash;</div>&ndash;&gt;-->
  <!--&lt;!&ndash;</div>&ndash;&gt;-->
  <!--&lt;!&ndash;</div>&ndash;&gt;-->
  <!--&lt;!&ndash;</div>&ndash;&gt;-->
  <!--&lt;!&ndash;<div class="clearfix"></div>&ndash;&gt;-->
  <!--&lt;!&ndash;</div>&ndash;&gt;-->
  <!--&lt;!&ndash;</div>&ndash;&gt;-->
  <!--&lt;!&ndash;<div class="col-md-4 col-sm-6 col-xs-12 search-result-box padding-none margin-top" ng-repeat="result in ctrl.results | orderBy : 'totalCost'">&ndash;&gt;-->
  <!--&lt;!&ndash;<p class="hidden" ng-init="ctrl.checkNotam(result)"></p>&ndash;&gt;-->
  <!--&lt;!&ndash;<div class="custom-shadow">&ndash;&gt;-->
  <!--&lt;!&ndash;<div class="col-sm-12 search-img-con" style="border: 1px solid lightgray; padding: 0">&ndash;&gt;-->
  <!--&lt;!&ndash;<div class="text-center" style="background-color: rgba(53, 53, 53, 0.1);">&ndash;&gt;-->
  <!--&lt;!&ndash;<img style="width: 250px; height: 250px;" ng-src="{{result.aircraft.aircraft_images[0].url}}" src="" alt="">&ndash;&gt;-->
  <!--&lt;!&ndash;</div>&ndash;&gt;-->
  <!--&lt;!&ndash;<div class="black-layer-con">&ndash;&gt;-->
  <!--&lt;!&ndash;<h4 class=""><i class="fa fa-rupee"></i> {{ctrl.totalTripCost(result) | currency:"":0 | indianCurrency}}</h4>&ndash;&gt;-->
  <!--&lt;!&ndash;<ul class="icon-box">&ndash;&gt;-->
  <!--&lt;!&ndash;<li><span class="search-icon seat-icon" uib-tooltip="Seat - {{result.aircraft.seating_capacity}}"></span></li>&ndash;&gt;-->
  <!--&lt;!&ndash;<li><span class="search-icon baggage-icon" uib-tooltip="Baggage - {{result.aircraft.baggage_capacity_in_kg}}kg"></span></li>&ndash;&gt;-->
  <!--&lt;!&ndash;&lt;!&ndash;<li><span class="search-icon watch-icon" uib-tooltip="{{ctrl.formateTime()}}"></span></li>&ndash;&gt;&ndash;&gt;-->
  <!--&lt;!&ndash;<li><span class="search-icon speed-icon" uib-tooltip="Speed - {{result.aircraft.cruise_speed_in_nm_per_hour}}kts"></span></li>&ndash;&gt;-->
  <!--&lt;!&ndash;<li><span class="search-icon height-icon" uib-tooltip="Cabin Height - {{result.aircraft.cabin_height_in_meters}}meter"></span></li>&ndash;&gt;-->
  <!--&lt;!&ndash;<li><span class="search-icon crew-icon" uib-tooltip="Crew - {{result.aircraft.crew}}"></span></li>&ndash;&gt;-->
  <!--&lt;!&ndash;<div class="clearfix"></div>&ndash;&gt;-->
  <!--&lt;!&ndash;</ul>&ndash;&gt;-->
  <!--&lt;!&ndash;</div>&ndash;&gt;-->
  <!--&lt;!&ndash;</div>&ndash;&gt;-->
  <!--&lt;!&ndash;<div class="col-sm-12" style="border: 1px solid lightgray; padding: 0">&ndash;&gt;-->
  <!--&lt;!&ndash;<div class="col-md-8 col-sm-8 col-xs-8">&ndash;&gt;-->
  <!--&lt;!&ndash;<h3>{{result.aircraft.aircraft_type.name}}</h3>&ndash;&gt;-->
  <!--&lt;!&ndash;</div>&ndash;&gt;-->
  <!--&lt;!&ndash;<div class="col-md-4 col-sm-4 col-xs-4 text-right">&ndash;&gt;-->
  <!--&lt;!&ndash;<h4 class="text-gray"><i class="fa fa-rupee"></i> {{ctrl.totalTripCost(result) | currency:"":0 | indianCurrency}} <small>Estimated</small></h4>&ndash;&gt;-->
  <!--&lt;!&ndash;</div>&ndash;&gt;-->
  <!--&lt;!&ndash;<div class="col-md-8 col-sm-8 col-xs-8" ng-hide="result.is_notam">&ndash;&gt;-->
  <!--&lt;!&ndash;<a href="" class="no-text-decoration custom-btn" ng-click="ctrl.modalDetail(result)">Details</a>&ndash;&gt;-->
  <!--&lt;!&ndash;<span ng-hide="result.is_notam">&ndash;&gt;-->
  <!--&lt;!&ndash;<a href="" class="custom-btn no-text-decoration" ng-hide="result.enquired" ng-click="ctrl.enquire(result)">Enquire</a>&ndash;&gt;-->
  <!--&lt;!&ndash;<span ng-show="result.enquired">Enquired</span>&ndash;&gt;-->
  <!--&lt;!&ndash;</span>&ndash;&gt;-->
  <!--&lt;!&ndash;<span ng-show="result.is_notam" style="color:red;">Can't enquire, because of Notam</span>&ndash;&gt;-->

  <!--&lt;!&ndash;&lt;!&ndash;<a href="" class="no-text-decoration custom-btn" ng-click="ctrl.previewProForma(result)">View Proforma Invoice</a>&ndash;&gt;&ndash;&gt;-->
  <!--&lt;!&ndash;</div>&ndash;&gt;-->
  <!--&lt;!&ndash;<div class="col-md-4 col-sm-4 col-xs-4 ">&ndash;&gt;-->

  <!--&lt;!&ndash;</div>&ndash;&gt;-->
  <!--&lt;!&ndash;<div class="clearfix"></div>&ndash;&gt;-->
  <!--&lt;!&ndash;</div>&ndash;&gt;-->
  <!--&lt;!&ndash;<div class="clearfix"></div>&ndash;&gt;-->
  <!--&lt;!&ndash;</div>&ndash;&gt;-->
  <!--&lt;!&ndash;</div>&ndash;&gt;-->

  <!--&lt;!&ndash;========================================================================================&ndash;&gt;-->
  <!--&lt;!&ndash;========================================================================================&ndash;&gt;-->
  <!--&lt;!&ndash;========================================================================================&ndash;&gt;-->
  <!--<div class="clearfix"></div>-->
  <!--</div>-->
  <!--<div ng-show="ctrl.results.length == 0">-->
  <!--<h3 class="text-center">Oops! we don't have any aircrafts available matching your query.</h3>-->
  <!--</div>-->
  <!--</div>-->
  <!--</div>-->

  <div ng-show="ctrl.loading">
    <h1 class="text-center" style="padding-top: 200px; padding-bottom: 200px">
      <!--<i class="fa fa-gear fa-spin"></i> -->
      Loading...</h1>
  </div>
</div>

<style>

    .slider {
        display: inline-block;
        vertical-align: middle;
        position: relative;
    }
    .slider.slider-horizontal {
        width: 210px;
        height: 20px;
    }
    .slider.slider-horizontal .slider-track {
        height: 10px;
        width: 100%;
        margin-top: -5px;
        top: 50%;
        left: 0;
    }
    .slider.slider-horizontal .slider-selection,
    .slider.slider-horizontal .slider-track-low,
    .slider.slider-horizontal .slider-track-high {
        height: 100%;
        top: 0;
        bottom: 0;
    }
    .slider.slider-horizontal .slider-tick,
    .slider.slider-horizontal .slider-handle {
        margin-left: -10px;
        margin-top: -5px;
    }
    .slider.slider-horizontal .slider-tick.triangle,
    .slider.slider-horizontal .slider-handle.triangle {
        border-width: 0 10px 10px 10px;
        width: 0;
        height: 0;
        border-bottom-color: #0480be;
        margin-top: 0;
    }
    .slider.slider-horizontal .slider-tick-label-container {
        white-space: nowrap;
        margin-top: 20px;
    }
    .slider.slider-horizontal .slider-tick-label-container .slider-tick-label {
        padding-top: 4px;
        display: inline-block;
        text-align: center;
    }
    .slider.slider-vertical {
        height: 210px;
        width: 20px;
    }
    .slider.slider-vertical .slider-track {
        width: 10px;
        height: 100%;
        margin-left: -5px;
        left: 50%;
        top: 0;
    }
    .slider.slider-vertical .slider-selection {
        width: 100%;
        left: 0;
        top: 0;
        bottom: 0;
    }
    .slider.slider-vertical .slider-track-low,
    .slider.slider-vertical .slider-track-high {
        width: 100%;
        left: 0;
        right: 0;
    }
    .slider.slider-vertical .slider-tick,
    .slider.slider-vertical .slider-handle {
        margin-left: -5px;
        margin-top: -10px;
    }
    .slider.slider-vertical .slider-tick.triangle,
    .slider.slider-vertical .slider-handle.triangle {
        border-width: 10px 0 10px 10px;
        width: 1px;
        height: 1px;
        border-left-color: #0480be;
        margin-left: 0;
    }
    .slider.slider-vertical .slider-tick-label-container {
        white-space: nowrap;
    }
    .slider.slider-vertical .slider-tick-label-container .slider-tick-label {
        padding-left: 4px;
    }
    .slider.slider-disabled .slider-handle {
        background-image: -webkit-linear-gradient(top, #dfdfdf 0%, #bebebe 100%);
        background-image: -o-linear-gradient(top, #dfdfdf 0%, #bebebe 100%);
        background-image: linear-gradient(to bottom, #dfdfdf 0%, #bebebe 100%);
        background-repeat: repeat-x;
        filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffdfdfdf', endColorstr='#ffbebebe', GradientType=0);
    }
    .slider.slider-disabled .slider-track {
        background-image: -webkit-linear-gradient(top, #e5e5e5 0%, #e9e9e9 100%);
        background-image: -o-linear-gradient(top, #e5e5e5 0%, #e9e9e9 100%);
        background-image: linear-gradient(to bottom, #e5e5e5 0%, #e9e9e9 100%);
        background-repeat: repeat-x;
        filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffe5e5e5', endColorstr='#ffe9e9e9', GradientType=0);
        cursor: not-allowed;
    }
    .slider input {
        display: none;
    }
    .slider .tooltip.top {
        margin-top: -36px;
    }
    .slider .tooltip-inner {
        white-space: nowrap;
        max-width: none;
    }
    .slider .hide {
        display: none;
    }
    .slider-track {
        position: absolute;
        cursor: pointer;
        background-image: -webkit-linear-gradient(top, #f5f5f5 0%, #f9f9f9 100%);
        background-image: -o-linear-gradient(top, #f5f5f5 0%, #f9f9f9 100%);
        background-image: linear-gradient(to bottom, #f5f5f5 0%, #f9f9f9 100%);
        background-repeat: repeat-x;
        filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#fff5f5f5', endColorstr='#fff9f9f9', GradientType=0);
        -webkit-box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
        box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
        border-radius: 4px;
    }
    .slider-selection {
        position: absolute;
        background-color: #cc9345;
        border-radius: 4px;
    }
    .slider-selection.tick-slider-selection {
        background-image: -webkit-linear-gradient(top, #89cdef 0%, #81bfde 100%);
        background-image: -o-linear-gradient(top, #89cdef 0%, #81bfde 100%);
        background-image: linear-gradient(to bottom, #89cdef 0%, #81bfde 100%);
        background-repeat: repeat-x;
        filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff89cdef', endColorstr='#ff81bfde', GradientType=0);
    }
    .slider-track-low,
    .slider-track-high {
        position: absolute;
        background: transparent;
        -webkit-box-sizing: border-box;
        -moz-box-sizing: border-box;
        box-sizing: border-box;
        border-radius: 4px;
    }
    .slider-handle {
        position: absolute;
        width: 20px;
        height: 20px;
        background-color: #9c6128;
        -webkit-box-shadow: inset 0 1px 0 rgba(255,255,255,.2), 0 1px 2px rgba(0,0,0,.05);
        box-shadow: inset 0 1px 0 rgba(255,255,255,.2), 0 1px 2px rgba(0,0,0,.05);
        border: 0px solid transparent;
    }
    .slider-handle.round {
        border-radius: 50%;
    }
    .slider-handle.triangle {
        background: transparent none;
    }
    .slider-handle.custom {
        background: transparent none;
    }
    .slider-handle.custom::before {
        line-height: 20px;
        font-size: 20px;
        content: '\2605';
        color: #726204;
    }
    .slider-tick {
        position: absolute;
        width: 20px;
        height: 20px;
        background-image: -webkit-linear-gradient(top, #f9f9f9 0%, #f5f5f5 100%);
        background-image: -o-linear-gradient(top, #f9f9f9 0%, #f5f5f5 100%);
        background-image: linear-gradient(to bottom, #f9f9f9 0%, #f5f5f5 100%);
        background-repeat: repeat-x;
        filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#fff9f9f9', endColorstr='#fff5f5f5', GradientType=0);
        -webkit-box-shadow: inset 0 -1px 0 rgba(0, 0, 0, 0.15);
        box-shadow: inset 0 -1px 0 rgba(0, 0, 0, 0.15);
        -webkit-box-sizing: border-box;
        -moz-box-sizing: border-box;
        box-sizing: border-box;
        filter: none;
        opacity: 0.8;
        border: 0px solid transparent;
    }
    .slider-tick.round {
        border-radius: 50%;
    }
    .slider-tick.triangle {
        background: transparent none;
    }
    .slider-tick.custom {
        background: transparent none;
    }
    .slider-tick.custom::before {
        line-height: 20px;
        font-size: 20px;
        content: '\2605';
        color: #726204;
    }
    .slider-tick.in-selection {
        background-image: -webkit-linear-gradient(top, #89cdef 0%, #81bfde 100%);
        background-image: -o-linear-gradient(top, #89cdef 0%, #81bfde 100%);
        background-image: linear-gradient(to bottom, #89cdef 0%, #81bfde 100%);
        background-repeat: repeat-x;
        filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff89cdef', endColorstr='#ff81bfde', GradientType=0);
        opacity: 1;
    }

</style>

